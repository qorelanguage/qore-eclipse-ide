<?xml version="1.0" encoding="UTF-8" ?>

<chapter id="System_Namespaces_and_Class_Library">
  <title>System Namespaces and Class Library</title>


  <sect1 id="Qore_Constants">
    <title>Qore Constants</title>

    <para>The following constants are defined in the Qore namespace.</para>

    <table id="Qore_General_Constants">
      <title>General Constants in the Qore Namespace</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>True</para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>True</para></entry>
	  </row>
	  <row>
	    <entry><para>False</para></entry>
	    <entry><para>Boolean</para></entry>
	    <entry><para>False</para></entry>
	  </row>
	  <row>
	    <entry><para>VersionString</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>The complete version string for this version of Qore.</para></entry>
	  </row>
	  <row>
	    <entry><para>VersionMajor</para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>The major version number of Qore.</para></entry>
	  </row>
	  <row>
	    <entry><para>VersionMinor</para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>The minor version number of Qore.</para></entry>
	  </row>
	  <row>
	    <entry><para>VersionSub</para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>The sub version number of Qore.</para></entry>
	  </row>
	  <row>
	    <entry><para>Build</para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>The build number for Qore.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Qore_IO_Constants">
      <title>I/O Constants in the Qore Namespace</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>stdin</para></entry>
	    <entry><para>File Object</para></entry>
	    <entry><para>Standard input File object.</para></entry>
	  </row>
	  <row>
	    <entry><para>stdout</para></entry>
	    <entry><para>File Object</para></entry>
	    <entry><para>Standard output File object.</para></entry>
	  </row>
	  <row>
	    <entry><para>stderr</para></entry>
	    <entry><para>File Object</para></entry>
	    <entry><para>Standard error File object.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>The Qore::Err namespace contains error constants, returned by the <link linkend="errno">errno()</link> function.</para>

    <table id="Qore_Error_Constants">
      <title>Error Constants in the Err Namespace</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>Err::*</para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>System-dependent integer ERRNO constants (ex: ENOMEM, etc)</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="Qore_Exception_Constants">
      <title>Exception Constants in the Qore Namespace</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>ET_System</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Exception Type System: used for system exceptions.</para></entry>
	  </row>
	  <row>
	    <entry><para>ET_User</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Exception Type User: used for user exceptions (thrown using the <command>throw</command> statement.</para></entry>
	  </row>
	  <row>
	    <entry><para>CT_User</para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>Call Type User: used for user function/method calls in a call stack.</para></entry>
	  </row>
	  <row>
	    <entry><para>CT_Builtin</para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>Call Type Builtin: used for builtin function/method calls in a call stack.</para></entry>
	  </row>
	  <row>
	    <entry><para>CT_NewThread</para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>Call Type New Thread: used in a call stack when a new thread is started with the <command>background</command> expression.</para></entry>
	  </row>
	  <row>
	    <entry><para>CT_Rethrow</para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>Call Type Rethrow: a marker for a rethrown exception in a call stack.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

  </sect1>

  <sect1 id="Qore_Type_Namespace">
    <title>Qore::Type Namespace</title>

    <para>The Qore::Type namespace only has constant definitions for basic Qore datatypes in it. There are no class definitions in the Qore::Type namespace.  The <link linkend="type">type() function</link> returns values in the set of the following constants.</para>

    <table id="Qore_Type_Constants">
      <title>Qore::Type Constant Definitions</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>Qore::Type::Boolean</para></entry>
	    <entry><link linkend="Boolean">Boolean</link></entry>
	  </row>
	  <row>
	    <entry><para>Qore::Type::Int</para></entry>
	    <entry><link linkend="Integer">Integer</link></entry>
	  </row>
	  <row>
	    <entry><para>Qore::Type::String</para></entry>
	    <entry><link linkend="String">String</link></entry>
	  </row>
	  <row>
	    <entry><para>Qore::Type::Float</para></entry>
	    <entry><link linkend="Float">Float</link></entry>
	  </row>
	  <row>
	    <entry><para>Qore::Type::Date</para></entry>
	    <entry><link linkend="Date">Date</link></entry>
	  </row>
	  <row>
	    <entry><para>Qore::Type::Binary</para></entry>
	    <entry><link linkend="Binary">Binary</link></entry>
	  </row>
	  <row>
	    <entry><para>Qore::Type::Hash</para></entry>
	    <entry><link linkend="Hashes">Hash</link></entry>
	  </row>
	  <row>
	    <entry><para>Qore::Type::List</para></entry>
	    <entry><link linkend="Lists">List</link></entry>
	  </row>
	  <row>
	    <entry><para>Qore::Type::Object</para></entry>
	    <entry><link linkend="Objects">Object</link></entry>
	  </row>
	  <row>
	    <entry><para>Qore::Type::NullType</para></entry>
	    <entry><link linkend="NULL">SQL NULL</link></entry>
	  </row>
	  <row>
	    <entry><para>Qore::Type::NothingType</para></entry>
	    <entry><link linkend="NOTHING">NOTHING</link></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 id="Qore_File_Class">
    <title>Qore::File Class</title>

    <para>The File class allows Qore programs to read, write, and create files.</para>

    <para>File objects can be created and/or opened with a specific character set, that means that any string 
    reads from the file will create string data tagged with the file's character 
    set, and any string data written to the file will be converted to that character 
    set before written if necessary. If no character set is specified, then the 
    default Qore character set is assumed for the file.</para>

    <table>
      <title>Qore::File Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Qore_File_constructor">File::constructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the object and optionally sets the file's character set.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_destructor">File::destructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Closes the file if it is open and destroys the file object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_copy">File::copy()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates a new file object with the same character set specification as the original, otherwise no other information is copied.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_close">File::close()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Closes the file object</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_f_printf">File::f_printf()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a formatted string to a file, enforces hard field limits.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_f_vprintf">File::f_vprintf()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a formatted string to a file, where the second argument is the formatting argument list, enforces hard field limits.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_getchar">File::getchar()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Reads one character from the file</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_getPos">File::getPos()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current file position (in bytes)</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_open">File::open()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Opens a file in a particular mode</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_printf">File::printf()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a formatted string to a file.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_read">File::read()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a certain number of bytes from the file and returns a string.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_readBinary">File::readBinary()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a certain number of bytes from the file and returns binary data.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_printf">File::printf()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a formatted string to the file.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_read">File::read()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a certain amount of string data from the file.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_readi1">File::readi1()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 1 byte integer from the file.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_readi2">File::readi2()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 2 byte integer from the file in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_readi4">File::readi4()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 4 byte integer from the file in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_readi2LSB">File::readi2LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 2 byte integer from the file in little-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_readi4LSB">File::readi4LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads a 4 byte integer from the file in little-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_readBinary">File::readBinary()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Read a certain amount of data and return a binary object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_readLine">File::readLine()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Reads until an EOL marker is found</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_getCharset">File::getCharset()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the character set for the file</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_setCharset">File::setCharset()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the character set for the file.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_sync">File::sync()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Flushes the file's buffer to disk.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_setPos">File::setPos()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the current file position (in bytes).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_vprintf">File::vprintf()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a formatted string to a file, where the second argument is the formatting argument list.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_write">File::write()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes string or binary data to a file</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_writei1">File::writei1()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 1-byte integer to the file.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_writei2">File::writei2()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 2-byte integer in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_writei4">File::writei4()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 4-byte integer in big-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_writei2LSB">File::writei2LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 2-byte integer in little-endian format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_File_writei4LSB">File::writei4LSB()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Writes a 4-byte integer in little-endian format.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <table id="File_Constants">
      <title>File Constants in the Qore Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Name</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>      
	<tbody>
	  <row>
	    <entry><para>O_RDONLY</para></entry>
	    <entry><para>Open the file read-only.</para></entry>
	  </row>
	  <row>
	    <entry><para>O_WRONLY</para></entry>
	    <entry><para>Open the file write-only.</para></entry>
	  </row>
	  <row>
	    <entry><para>O_CREAT</para></entry>
	    <entry><para>Create the file if it doesn't exist.</para></entry>
	  </row>
	  <row>
	    <entry><para>O_APPEND</para></entry>
	    <entry><para>Open the file in append mode.</para></entry>
	  </row>
	  <row>
	    <entry><para>O_RDWR</para></entry>
	    <entry><para>Open for reading and writing.</para></entry>
	  </row>
	  <row>
	    <entry><para>O_TRUNC</para></entry>
	    <entry><para>Truncate the size to zero.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Qore_File_constructor">
      <title>Qore::File::constructor()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the File object. It accepts one optional argument that will set the default character set encoding for the file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> File(<replaceable>[string:encoding]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      <table>
	<title>Arguments for File::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>encoding</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The character set encoding for the file.  Any strings written to the file will be converted to this character set encoding if necessary.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Object</para></entry>
	      <entry><para>The File object created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_destructor">
      <title>Qore::File::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the file if it's open and destroys the File object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore_File_copy">
      <title>Qore::File::copy()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new File object with the same character set spcification as the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::copy()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>	    
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>The new File object created with the same character set specification as the original object.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_close">
      <title>Qore::File::close()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the file object if it's open.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::close()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::close()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Value for File::close()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 for success, -1 for an error (see <link linkend="errno">errno()</link> and <link linkend="strerror">strerror()</link> for the error information)</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_f_printf">
      <title>Qore::File::f_printf()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a formatted string to a file, enforces hard field limits.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::f_printf(<replaceable>string:format, [args ...]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::f_printf()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>format</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The format string, see <link linkend="String_Formatting">String Formatting</link> for a specification.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>args</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>The remainder of the arguments are arguments to the format string.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::f_printf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Exceptions Thrown by File::f_printf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-WRITE-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_f_vprintf">
      <title>Qore::File::f_vprintf()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a formatted string to a file, where the second argument is the formatting argument list, enforces hard field limits.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::f_vprintf(<replaceable>string:format, [arg_list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::f_vprintf()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>format</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The format string, see <link linkend="String_Formatting">String Formatting</link> for a specification.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>arg_list</replaceable></para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>This list will be used as the argument list or the format string.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::f_vprintf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::f_vprintf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-WRITE-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_getchar">
      <title>Qore::File::getchar()</title><para></para>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads one character from the file and returns it as a one-character string.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::getchar()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::getchar()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a<replaceable></replaceable></para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::getchar()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The single character read form the file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
    
    <sect2 id="Qore_File_getCharset">
      <title>Qore::File::getCharset()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the character set encoding for the file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::getCharset()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::getCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::getCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The character set encoding for the file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_getPos">
      <title>Qore::File::getPos()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets the current file position in bytes.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::getPos()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::getPos()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::getPos()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>The byte position in the file starting at 0.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_printf">
      <title>Qore::File::printf()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a formatted string to the file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::printf(<replaceable>string:format, [args ...]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::printf()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>format</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The format string, see <link linkend="String_Formatting">String Formatting</link> for a specification.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>args</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>The remainder of the arguments are arguments to the format string.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::printf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::printf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-WRITE-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_open">
      <title>Qore::File::open()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Opens the file in the mode given. 
	    Aditionally, the file permissions can be given if the file is to be created, and 
	    optionally the file's default character set can be specified.</para>
	    </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::open(<replaceable>string:filename, [integer:flags, [integer:mode, [string:charset]]]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::open()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>filename</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The Filename of the file.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>flags</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Flags that determine the way the file is accessed, see <link linkend="File_Constants">File Constants</link> for more information.  If this argument is not given, O_RDONLY will be used as the default value.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>mode</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Permission bits for when the file is to be created (default: 0777)</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>charset</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the default character set for this file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for File::open()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>0 = no error, -1 = see <link linkend="errno">errno()</link> and <link linkend="strerror">strerror()</link> for the error message</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::open()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-OPEN-PARAMETER-ERROR</para></entry>
	      <entry><para>Missing filename argument.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore_File_read">
      <title>Qore::File::read()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a certain amount of string data from the file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::read(<replaceable>integer:size</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::read()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>size</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The number of bytes to read of the file, -1 will read the entire file.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::read()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The data read form the file, returned as a string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::read()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-READ-PARAMETER-ERROR</para></entry>
	      <entry><para>Missing size argument.</para></entry>
	    </row>
	    <row>
	      <entry><para>FILE-READ-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore_File_readi1">
      <title>Qore::File::readi1()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 1-byte integer from the file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readi1()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readi1()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns a 1-byte integer as read from the file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-READ-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_readi2">
      <title>Qore::File::readi2()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 2-byte integer from the file in big-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readi2()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readi2()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns a 2-byte as read from the file in big-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-READ-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_readi4">
      <title>Qore::File::readi4()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 4-byte integer from the file in big-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readi4()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readi4()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns a 4-byte integer as read from the file in big-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-READ-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_readi2LSB">
      <title>Qore::File::readi2LSB()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 2-byte integer from the file in little-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readi2LSB()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readi2LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Reads a 2-byte integer from the file in little-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-READ-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_readi4LSB">
      <title>Qore::File::readi4LSB()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads a 4-byte integer from the file in little-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readi4LSB()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readi4LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Reads a 4-byte integer from the file in little-endian format.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-READ-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_readBinary">
      <title>Qore::File::readBinary()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Read a certain amount of data and return a binary object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readBinary(<replaceable>integer:size</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readBinary()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>size</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The number of bytes to read of the file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Binary</para></entry>
	      <entry><para>A binary object containing the data read from the file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by File::readBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-READ-BINARY-PARAMETER-ERROR</para></entry>
	      <entry><para>Missing size argument.</para></entry>
	    </row>
	    <row>
	      <entry><para>FILE-READ-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_readLine">
      <title>Qore::File::readLine()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads until an EOL marker is found.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::readLine()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::readLine()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::readLine()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The line read from the file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::readLine()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-READLINE-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_setCharset">
      <title>Qore::File::setCharset()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the character set for the file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::setCharset(<replaceable>string:encoding</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::setCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>encoding</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The character set encoding for the file.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::setCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_setPos">
      <title>Qore::File::setPos()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the current file position in bytes.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::setPos(<replaceable>integer:position</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::setPos()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>position</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The position in the file as offset from position 0.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::setPos()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns the new offset in the file, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_sync">
      <title>Qore::File::sync()</title>

     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Flushes the file's buffer to disk.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::sync()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::sync()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::sync()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_vprintf">
      <title>Qore::File::vprintf()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a formatted string to a file, where the second argument is the formatting argument list.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::vprintf(<replaceable>string:format, [arg_list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::vprintf()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>format</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The format string, see <link linkend="String_Formatting">String Formatting</link> for a specification.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>arg_list</replaceable></para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>This list will be used as the argument list or the format string.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::vprintf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::vprintf()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-WRITE-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_write">
      <title>Qore::File::write()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes string or binary data to a file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::write(<replaceable>arg</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::write()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>arg</replaceable></para></entry>
	      <entry><para>String or Binary</para></entry>
	      <entry><para>Writes the data to the file.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::write()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::write()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-WRITE-PARAMETER-ERROR</para></entry>
	      <entry><para>Missing string or binary argument.</para></entry>
	    </row>
	    <row>
	      <entry><para>FILE-WRITE-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_writei1">
      <title>Qore::File::writei1()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 1-byte integer to the file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::writei1(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei1()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to write; only the least-significant 8 bits will be written to the file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::writei1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-WRITE-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_writei2">
      <title>Qore::File::writei2()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 2-byte integer in big-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::writei2(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei2()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to write; writes a 2-byte integer in big-endian format.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::writei2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-WRITE-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_writei4">
      <title>Qore::File::writei4()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 4-byte integer in big-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::writei4(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei4()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to write; writes a 4-byte integer in big-endian format.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::writei4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-WRITE-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_writei2LSB">
      <title>Qore::File::writei2LSB()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 2-byte integer in little-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::writei2LSB(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei2LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to write; writes a 2-byte integer in little-endian format.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::writei2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-WRITE-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_File_writei4LSB">
      <title>Qore::File::writei4LSB()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Writes a 4-byte integer in little-endian format.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>File::writei4LSB(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for File::writei4LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to write; writes a 4-byte integer in little-endian format.</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for File::writei4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Returns 0 for success, -1 for error.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by File::writei4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FILE-WRITE-ERROR</para></entry>
	      <entry><para>File is not open.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="Qore::GetOpt_Class">
    <title>Qore::GetOpt Class</title>
    
    <para>The GetOpt class provides an easy way to process POSIX-style command-line options in Qore scripts/programs.</para>

    <table>
      <title>Qore::GetOpt Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>

	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>

	<tbody>
	  <row>
	    <entry><para><link linkend="Qore::GetOpt::constructor">GetOpt::constructor()</link></para></entry>
	    <entry>Y</entry>
	    <entry>Creates the GetOpt object with the option hash passed.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_GetOpt_destructor">GetOpt::destructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Destroys the object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_GetOpt_copy">GetOpt::copy()</link></para></entry>
	    <entry>Y</entry>
	    <entry>Throws an exception; objects of this class cannot be copied.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::GetOpt::parse">GetOpt::parse()</link></para></entry>
	    <entry>N</entry>
	    <entry>Parses the argument list passed and retuns a hash of the results.</entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Qore::GetOpt::constructor">
      <title>Qore::GetOpt::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the GetOpt object and sets the option hash with the single required argument.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> GetOpt(<replaceable>option_hash</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for GetOpt::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>option_hash</replaceable></para></entry>
	      <entry><para>Hash</para></entry>
	      <entry><para>Each key defines the key value for the return hash if any arguments are given corresponding to the string value of the key.</para></entry>
	    </row>	  
	  </tbody>
	</tgroup>
      </table>
      
      <para>The string value of each hash follows the following pattern:</para>
      <programlisting><replaceable>opts</replaceable>[=|:<replaceable>type</replaceable>[<replaceable>modifier</replaceable>]]</programlisting>
      
      <table>
	<title>Option Hash Value String</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Component</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>opts</replaceable></para></entry>
	      <entry><para>At least one short option and/or a long option name; if both are present, then they must be separated by a comma.  The short option must be a single character.</para></entry>
	    </row>
	    <row>
	      <entry><para>[=:<replaceable>type</replaceable>]</para></entry>
	      <entry><para>if &quot;=&quot; is used, then the option takes a mandatory argument, if &quot;:&quot; is used, then the argument is optional.  Types are specified as follows: s=string, i=integer, f=float, d=date, b=boolean</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>modifier</replaceable></para></entry>
	      <entry><para>@ specifies a list, + an additive value (sum; must be integer or float type)</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for GetOpt::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Object</para></entry>
	      <entry><para>The GetOpt object created.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by GetOpt::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>GETOPT-OPTION-ERROR</para></entry>
	      <entry><para>There was a syntax or format error in the option specification.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_GetOpt_destructor">
      <title>Qore::GetOpt::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the GetOpt object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore_GetOpt_copy">
      <title>Qore::GetOpt::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <para>Do not use this method; this method is only present to prohibit copying of objects of this class.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for GetOpt::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for GetOpt::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value because it throws an exception.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by GetOpt::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>GETOPT-COPY-ERROR</para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::GetOpt::parse">
      <title>Qore::GetOpt::parse()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Parses the list of parameters according to the option hash passed to the constructor.  If a reference to a list is passed to this function, then all arguments parsed will be removed from the list, leaving only unparsed arguments (for example, file names).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>GetOpt::parse(<replaceable>list_reference</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for GetOpt::parse()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>list_reference</replaceable></para></entry>
	      <entry><para>List Reference</para></entry>
	      <entry><para>The entire command line to process (ex: <link linkend="Special_Qore_Variables">$ARGV</link>).</para></entry>
	    </row>	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for GetOpt::parse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Hash</para></entry>
	      <entry><para>A hash keyed by option names (as given in the hash to the GetOpt constructor), where each key's value is the value of the arguments passed in the list argument.  The hash key "_ERRORS_" will contain any errors.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>      
    </sect2>
  </sect1>

  <sect1 id="Qore_FtpClient_Class">
    <title>Qore::FtpClient Class</title>
    
    <para>The FtpClient class allows Qore programs to communicate with FTP servers.  The constructor takes an optional URL with the following format:</para>
    
    <programlisting>[ftp://][username[:password]@]hostname[:port]</programlisting>
    
    <para>If the URL is not set with the constructor, then the connection parameters must be set with the FtpClient::set*() methods. At the very minimum the hostname must be set.  See the following table for default URL parameters.</para>
    
    <table>
      <title>FtpClient::constructor() Default URL Parameters</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Field</para></entry>
	    <entry><para>Default Value</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><replaceable>username</replaceable></para></entry>
	    <entry><programlisting>anonymous</programlisting></entry>
	  </row>
	  <row>
	    <entry><para><replaceable>password</replaceable></para></entry>
	    <entry><programlisting>qore@nohost.com</programlisting></entry>
	  </row>
	  <row>
	    <entry><para><replaceable>port</replaceable></para></entry>
	    <entry><programlisting>21</programlisting></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>Once the URL (at least the hostname) has been set, the FtpClient::connect() method must be called to connect and login to the FTP server.</para>

    <para>When a data connection is required, the following modes are tried in series: EPSV (Extended Passive Mode), PASV (Passive Mode), and PORT (Port mode). If the FTP server does support one of these methods, or network conditions do not allow a data connection of any of these types to be established, then an exception is thrown.</para>

    <table>
      <title>Qore::FtpClient Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_constructor">FtpClient::constructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Creates object and optionally initializes URL</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_destructor">FtpClient::destructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_copy">FtpClient::copy()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception to prevent copying of objects this class.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_connect">FtpClient::connect()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Connects and logs in to FTP server</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_disconnect">FtpClient::disconnect()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Disconnects from the FTP server.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_list">FtpClient::list()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Gets a list of files from the FTP server in the server's long format.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_nlst">FtpClient::nlst()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Gets a list of file names from the FTP server.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_pwd">FtpClient::pwd()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Returns the server-side current working directory.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_cwd">FtpClient::cwd()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Changes the current working directory on the server.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_get">FtpClient::get()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Gets a file from the FTP server.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_put">FtpClient::put()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Transfers a file to the FTP server.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_del">FtpClient::del()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Deletes a file from the FTP server</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_setUserName">FtpClient::setUserName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the user name to use</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_setPassword">FtpClient::setPassword()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the password to use</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_setHostName">FtpClient::setHostName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the hostname to connect to</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_setPort">FtpClient::setPort()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the port to connect to</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_setURL">FtpClient::setURL()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Sets the URL</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_getUserName">FtpClient::getUserName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current user name</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_getPassword">FtpClient::getPassword()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current password</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_getHostName">FtpClient::getHostName()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current hostname</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_getPort">FtpClient::getPort()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current port</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_FtpClient_getURL">FtpClient::getURL()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Gets the current FTP URL</para></entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Qore_FtpClient_constructor">
      <title>Qore::FtpClient::constructor()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the FtpClient object. It accepts one optional argument that will set the URL for the FTP connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> FtpClient([<replaceable>string_value</replaceable>])</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string_value</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The entire command line to process.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Object</para></entry>
	      <entry><para>The FtpClient object created</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>UNSUPPORTED-PROTOCOL</para></entry>
	      <entry><para>Only &quot;ftp&quot; is allowed as the protocol in the URL.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-URL-ERROR</para></entry>
	      <entry><para>No hostname given in the URL.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore_FtpClient_destructor">
      <title>Qore::FtpClient::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore_FtpClient_copy">
      <title>Qore::FtpClient::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <para>Do not use this method; this method is only present to prohibit copying of objects of this class.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for FtpClient::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for FtpClient::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value because it throws an exception.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FTPCLIENT-COPY-ERROR</para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_connect">
      <title>Qore::FtpClient::connect()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Connects to the FTP server and attempts a login.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::connect(optional:<replaceable>string_value</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::connect()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string_value</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The URL of the FTP connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::connect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success, -1 for error.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::connect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FTP-RESPONSE-ERROR</para></entry>
	      <entry><para>Invalid response received from FTP server.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-CONNECT-ERROR</para></entry>
	      <entry><para>Cannot establish connection on data port, no hostname set, FTP server reported an error, etc.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-LOGIN-ERROR</para></entry>
	      <entry><para>Login denied by FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_disconnect">
      <title>Qore::FtpClient::disconnect()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Disconnects from FTP server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::disconnect()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::disconnect()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>No arguments are accepted by this method</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::disconnect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>Always returns 0 for success, on errors an exception is thrown.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_list">
      <title>Qore::FtpClient::list()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets a list of files from the FTP server in the server's long format in the current working directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::list()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::list()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::list()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>String</entry>
	      <entry>The string returned by the server without any translations or processing.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::list()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FTP-RECEIVE-ERROR</para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-NOT-CONNECTED</para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-LIST-ERROR</para></entry>
	      <entry><para>FTP server returned an error in response to the LIST command.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
    </sect2>
    <sect2 id="Qore_FtpClient_nlst">
      <title>Qore::FtpClient::nlst()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets a list of file names in the current working directory from the FTP server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::nlst()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::nlst()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::nlst()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>String</entry>
	      <entry>The string returned by the server without any translations or processing.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::nlst()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FTP-RECEIVE-ERROR</para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-NOT-CONNECTED</para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-LIST-ERROR</para></entry>
	      <entry><para>FTP server returned an error in response to the NSLT command.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore_FtpClient_pwd">
      <title>Qore::FtpClient::pwd()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the server-side current working directory.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::pwd()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::pwd()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not take any arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::pwd()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>String</entry>
	      <entry>The server-side current working directory.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::pwd()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FTP-RECEIVE-ERROR</para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-NOT-CONNECTED</para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-PWD-ERROR</para></entry>
	      <entry><para>FTP server returned an error to the PWD command.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore_FtpClient_cwd">
      <title>Qore::FtpClient::cwd()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Changes the current working directory on the server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::cwd(<replaceable>path</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::cwd()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>path</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The directory to change to.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::cwd()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Always returns 0, on errors exceptions are raised.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::cwd()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FTP-RECEIVE-ERROR</para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-NOT-CONNECTED</para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-CWD-ERROR</para></entry>
	      <entry><para>FTP server returned an error to the CWD command.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTPCLIENT-CWD-PARAMETER-ERROR</para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_get">
      <title>Qore::FtpClient::get()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Gets a file from the FTP server and stores it on the local system.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::get(<replaceable>server_path</replaceable>, [<replaceable>local_path</replaceable>])</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::get()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>server_path</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The path on the server to the file to get.</para></entry>
	    </row>
	    <row>
	      <entry><para>[<replaceable>local_path</replaceable>]</para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If given, where to save the local file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::get()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Always returns 0, on errors exceptions are raised.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::get()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FTP-RECEIVE-ERROR</para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-NOT-CONNECTED</para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-FILE-OPEN-ERROR</para></entry>
	      <entry><para>Could not create the local file.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-GET-ERROR</para></entry>
	      <entry><para>There was an error retrieving the file.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTPCLIENT-GET-PARAMETER-ERROR</para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_put">
      <title>Qore::FtpClient::put()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Transfers a file to the FTP server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::put(<replaceable>local_path</replaceable>, [<replaceable>server_path</replaceable>])</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::put()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>local_path</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The path on the local system of the file to send.</para></entry>
	    </row>
	    <row>
	      <entry><para>[<replaceable>server_path</replaceable>]</para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If given, where to save the file on the server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::put()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Always returns 0, on errors exceptions are raised.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::put()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FTP-RECEIVE-ERROR</para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-NOT-CONNECTED</para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-FILE-OPEN-ERROR</para></entry>
	      <entry><para>Could not open local file for reading.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-FILE-PUT-ERROR</para></entry>
	      <entry><para>Could not determine file size of local file (stat() failed).</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-PUT-ERROR</para></entry>
	      <entry><para>An error occurred while sending the file.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTPCLIENT-PUT-PARAMETER-ERROR</para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_del">
      <title>Qore::FtpClient::del()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Deletes a file on the FTP server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::del(<replaceable>server_path</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::del()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>server_path</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The path on the server to the file to delete.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::del()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Always returns 0, on errors exceptions are raised.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::del()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FTP-RECEIVE-ERROR</para></entry>
	      <entry><para>Incomplete message received on control port.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-NOT-CONNECTED</para></entry>
	      <entry><para>Not connected to FTP server (call FtpClient::connect() first).</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-DELETE-ERROR</para></entry>
	      <entry><para>FTP server returned an error to the DELE command.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTPCLIENT-DEL-PARAMETER-ERROR</para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_setUserName">
      <title>Qore::FtpClient::setUserName()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the username for logging in to the FTP server.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::setUserName(<replaceable>string</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setUserName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The username to use when logging in to the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::setUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FTPCLIENT-SETUSERNAME-PARAMETER-ERROR</para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_setPassword">
      <title>Qore::FtpClient::setPassword()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the login password for the FTP server to connect to.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::setPassword(<replaceable>string</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setPassword()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The password to use when logging in to the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::setPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FTPCLIENT-SETPASSWORD-PARAMETER-ERROR</para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_setHostName">
      <title>Qore::FtpClient::setHostName()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the hostname value for the FTP server to connect to.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::setHostName(<replaceable>string</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setHostName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The hostname to use when connecting to the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::setHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FTPCLIENT-SETHOSTNAME-PARAMETER-ERROR</para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_setPort">
      <title>Qore::FtpClient::setPort()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the connection port value.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::setPort(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setPort()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The port to use when connecting to the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::setPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>FTPCLIENT-SETPORT-PARAMETER-ERROR</para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_setURL">
      <title>Qore::FtpClient::setURL()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the connection and login parameters based on the URL passed as an argument.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::setURL(<replaceable>string</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::setURL()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The URL to use to set connection and login parameters for the FTP server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::setURL()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by FtpClient::setURL()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>UNSUPPORTED-PROTOCOL</para></entry>
	      <entry><para>Only &quot;ftp&quot; is allowed as the protocol in the URL.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTP-URL-ERROR</para></entry>
	      <entry><para>No hostname given in the URL.</para></entry>
	    </row>
	    <row>
	      <entry><para>FTPCLIENT-SETURL-PARAMETER-ERROR</para></entry>
	      <entry><para>Missing argument to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_getUserName">
      <title>Qore::FtpClient::getUserName()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current username.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::getUserName()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::getUserName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::getUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>String</entry>
	      <entry>The current username value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_getPassword">
      <title>Qore::FtpClient::getPassword()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current login password value for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::getPassword()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::getPassword()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::getPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>String</entry>
	      <entry>The current password value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_getHostName">
      <title>Qore::FtpClient::getHostName()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current hostname value for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::getHostName()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::getHostName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::getHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>String</entry>
	      <entry>The current hostname value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_getPort">
      <title>Qore::FtpClient::getPort()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current connection port value for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::getPort()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::getPort()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::getPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>The current connection port value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_FtpClient_getURL">
      <title>Qore::FtpClient::getURL()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the current connection URL string for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>FtpClient::getURL()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for FtpClient::getURL()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for FtpClient::getURL()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>String</entry>
	      <entry>The current URL value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>
  
  <sect1 id="Qore_Program_Class">
    <title>Qore::Program Class</title>
    
    <para>Program objects allow Qore programs to support subprograms with restricted capabilities, for example, to support user-defined logic for application actions.</para>
    
    <para>The constants in the following table are defined to allow parse options to be set for Program objects.  These options should be binary-OR'ed together and passed to the Program object's constructor.  Also see <link linkend="Command-Line_Parsing">Command-Line Parsing</link> for equivalent command-line options, and <link linkend="Parse_Directives">Parse Directives</link> for equivalent parse directives.</para>
    
    <table id="Parse_Options">
      <title>Parse Options</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Constant</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	
	<tbody>
	  <row>
	    <entry><para>Qore::PO_NO_GLOBAL_VARS</para></entry>
	    <entry>Disallows the use of global variables.</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_NO_SUBROUTINE_DEFS</para></entry>
	    <entry>Disallows subroutine (function) definitions.</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_NO_THREADS</para></entry>
	    <entry>Disallows any thread operations (<link linkend="Background_Operator"><command>background</command> operator</link> and <link linkend="thread_exit_Statements"><command>thread_exit</command> statement</link>, for example).</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_NO_TOP_LEVEL_STATEMENTS</para></entry>
	    <entry>Disallows top level code.</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_NO_CLASS_DEFS</para></entry>
	    <entry>Disallows class definitions.</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_NO_NAMESPACE_DEFS</para></entry>
	    <entry>Disallows new namespace definitions.</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_NO_CONSTANT_DEFS</para></entry>
	    <entry>Disallows constant definitions.</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_NO_NEW</para></entry>
	    <entry>Disallows use of the <command>new</command> operator.</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_NO_SYSTEM_CLASSES</para></entry>
	    <entry>Prohibits system classes from being imported into the new Program object.</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_NO_USER_CLASSES</para></entry>
	    <entry>Prohibits user classes from being imported into the new Program object.</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_NO_CHILD_PO_RESTRICTIONS</para></entry>
	    <entry>Allows child program objects to have fewer parse restrictions than the parent object.</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_NO_EXTERNAL_PROCESS</para></entry>
	    <entry>Disallows any access to external processes (with <link linkend="system">system()</link>, <link linkend="backquote">backquote()</link>, <link linkend="exec">exec()</link>, etc).</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_REQUIRE_OUR</para></entry>
	    <entry>Requires global variables to be declared with <command>our</command> before use.</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_NO_PROCESS_CONTROL</para></entry>
	    <entry>Disallows access to functions that would affect the current process (<link linkend="exit">exit()</link>, <link linkend="exit">exec()</link>, <link linkend="fork">fork()</link>, etc).</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_NO_NETWORK</para></entry>
	    <entry>Disallows access to network functions.</entry>
	  </row>
	  <row>
	    <entry><para>Qore::PO_NO_FILESYSTEM</para></entry>
	    <entry>Disallows access to the filesystem.</entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>
    <table>
      <title>Qore::Program Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	
	<tbody>
	  <row>
	    <entry><para><link linkend="Qore_Program_constructor">Program::constructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Creates the program object and optionally sets program capabilities (parse options)</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_destructor">Program::destructor()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Destroys the object.  Blocks until all threads have terminated.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_copy">Program::copy()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Throws an exception to prevent objects of this class from being copied.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_parse">Program::parse()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Performs a complete parse and commit of the string passed</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_parsePending">Program::parsePending()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Performs a 1st stage parse of the string passed</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_parseRollback">Program::parseRollback()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Rolls back all pending changes to the program object</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_parseCommit">Program::parseCommit()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Commits all pending changes to the program object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_callFunction">Program::callFunction()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Calls a function in the program object and returns the return value.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_callFunctionArgs">Program::callFunctionArgs()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Calls a function in the program object with the arguments given as a list</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_existsFunction">Program::existsFunction()</link></para></entry>
	    <entry>N</entry>
	    <entry><para>Checks if a user function exists in the program object</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_run">Program::run()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Runs the top-level code of the program object</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_importFunction">Program::importFunction()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Imports a user function into the program object's space; any calls to the function will run in the parent's space.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_importGlobalVariable">Program::importGlobalVariable()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Imports a global variable into the Program object's space.  If the variable is an object, then any methods 
	    called will run in the parent's space.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Program_getUserFunctionList">Program::getUserFunctionList()</link></para></entry>
	    <entry>N</entry>
	    <entry><para>Returns a list of all user functions defined 
	    in the program object.</para></entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>
    
    <sect2 id="Qore_Program_constructor">
      <title>Qore::Program::constructor()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Program object. It accepts one optional argument that will set the program capabilities for the program object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Program([integer:<replaceable>parse_options</replaceable>])</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Program::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	
	  <tbody>
	    <row>
	      <entry><para><replaceable>parse_options</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>A binary OR'ed product of <link linkend="Parse_Options">parse options</link>.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table><title>Return Values for Program::constructor()</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>	
	<tbody>
	  <row>
	    <entry><para>Object</para></entry>
	    <entry><para>The Program object created.</para></entry>
	  </row>
	</tbody>
      </tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_destructor">
      <title>Qore::Program::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.  If any threads are running in the program, the destructor will block until the threads terminate.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore_Program_copy">
      <title>Qore::Program::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Throws an exception; objects of this class cannot be copied.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <para>Do not use this method; this method is only present to prohibit copying of objects of this class.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Program::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Program::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method returns no value because it throws an exception.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>PROGRAM-COPY-ERROR</para></entry>
	      <entry><para>Objects of this class cannot be copied.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_parse">
      <title>Qore::Program::parse()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Parses the string argument and adds the code to the program object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>QoreProgram::parse(<replaceable>string</replaceable>, <replaceable>label</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::parse()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The code to parse.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>label</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The code to parse.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::parse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::parse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>PARSE-ERROR</para></entry>
	      <entry><para>An error occurred parsing the text.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_parsePending">
      <title>Qore::Program::parsePending()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Parses the text passed to pending lists in the Program object; does not resolve all references or commit the code to the Program object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>QoreProgram::parsePending(<replaceable>string</replaceable>, <replaceable>label</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::parsePending()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>string</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The code to parse.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>label</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The code to parse.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::parsePending()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::parsePending()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>PARSE-ERROR</para></entry>
	      <entry><para>An error occurred parsing the text.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_parseRollback">
      <title>Qore::Program::parseRollback()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Rolls back any pending code that has not yet been committed to the Program object with <link linkend="Qore_Program_parseCommit">parseCommit</link></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>QoreProgram::parseRollback()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::parseRollback()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::parseRollback()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_parseCommit">
      <title>Qore::Program::parseCommit()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Commits and pending code to the Program object and resolves all outstanding references in the pending code.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>QoreProgram::parseCommit()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::parseCommit()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::parseCommit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::parseCommit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>PARSE-ERROR</para></entry>
	      <entry><para>An error occurred parsing the text.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_callFunction">
      <title>Qore::Program::callFunction()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls a function in the program object and returns the return value.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>QoreProgram::callFunction(<replaceable>string:function_name, [args ...]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::callFunction()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>function_name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the function to call.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[args ...]</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>The remaining arguments passed to the method are passed to the function to be called.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::callFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Any</entry>
	      <entry>Depends on the function being called.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::callFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>INVALID-FUNCTION-ACCESS</para></entry>
	      <entry><para>Parse options do not allow this builtin function to be called.</para></entry>
	    </row>
	    <row>
	      <entry><para>NO-FUNCTION</para></entry>
	      <entry><para>The function does not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_callFunctionArgs">
      <title>Qore::Program::callFunctionArgs()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Calls a function in the program object and returns the return value, using the second argument as the argument list for the function call.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>QoreProgram::callFunctionArgs(<replaceable>string:function_name, [arg_list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::callFunctionArgs()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>function_name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the function to call.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[arg_list]</replaceable></para></entry>
	      <entry><para>List</para></entry>
	      <entry><para>Argument list to be passed to the function.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::callFunctionArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Any</entry>
	      <entry>Depends on the function being called.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::callFunctionArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>INVALID-FUNCTION-ACCESS</para></entry>
	      <entry><para>Parse options do not allow this builtin function to be called.</para></entry>
	    </row>
	    <row>
	      <entry><para>NO-FUNCTION</para></entry>
	      <entry><para>The function does not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_existsFunction">
      <title>Qore::Program::existsFunction()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Checks if a user function exists in the program object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>QoreProgram::existsFunction(<replaceable>function_name</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::existsFunction()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>function_name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the function to check.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::existsFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Boolean</entry>
	      <entry>Returns True if the function exists, False if not.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_run">
      <title>Qore::Program::run()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Runs the program.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>QoreProgram::run()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::run()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::run()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Any</entry>
	      <entry>Depends on the program - any final <command>return</command> statement will return a value to this method.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_importFunction">
      <title>Qore::Program::importFunction()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Imports a user function into the program object's space; any calls to the imported function will run in the parent's space.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>QoreProgram::importFunction(<replaceable>function_name</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::importFunction()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>function_name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the function to import.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::importFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::importFunction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>PROGRAM-IMPORTFUNCTION-PARAMETER-ERROR</para></entry>
	      <entry><para>No function name was passed to the method.</para></entry>
	    </row>
	    <row>
	      <entry><para>PROGRAM-IMPORTFUNCTION-PARAMETER-ERROR</para></entry>
	      <entry><para>Cannot import a function into the same Program object.</para></entry>
	    </row>
	    <row>
	      <entry><para>PROGRAM-IMPORTFUNCTION-NO-FUNCTION</para></entry>
	      <entry><para>The function does not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Program_importGlobalVariable">
      <title>Qore::Program::importGlobalVariable()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Imports a global variable into the program object's space.  If the variable is an object, then any methods called from the subprogram will run in the parent's space.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>QoreProgram::importGlobalVariable(<replaceable>string:name, [boolean:read_only]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::importGlobalVariable()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the global variable without the $</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[read_only]</replaceable></para></entry>
	      <entry><para>Boolean</para></entry>
	      <entry><para>If this argument is present and is True, then the variable will be imported read-only, and cannot be changed by the subprogram.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::importGlobalVariable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Program::importGlobalVariable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>PROGRAM-IMPORTGLOBALVARIABLE-PARAMETER-ERROR</para></entry>
	      <entry><para>No variable name was passed to the method.</para></entry>
	    </row>
	    <row>
	      <entry><para>PROGRAM-IMPORTGLOBALVARIABLE-EXCEPTION</para></entry>
	      <entry><para>The global variable does not exist.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore_Program_getUserFunctionList">
      <title>Qore::Program::getUserFunctionList()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns a list of all user functions defined in the Program object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>QoreProgram::getUserFunctionList()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Program::getUserFunctionList()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Program::getUserFunctionList()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>List</entry>
	      <entry>A list of strings giving the names of all functions implemented in the program object.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>
  
  <sect1 id="Qore_Socket_Class">
    <title>Qore::Socket Class</title>
    
    <para>Socket objects allow Qore programs safe access to network sockets.  Non-blocking socket I/O can be performed by appending a timeout value in milliseconds to all Socket::recv*() methods, or by using the <link linkend="Qore_Socket_isDataAvailable">Socket::isDataAvailable()</link> method with a timeout value in milliseconds (1000 ms = 1 second).</para>

    <para>Socket objects can automatically convert character set encodings if desired when sending string data with <link linkend="Qore_Socket_send">Socket::send()</link>.  Use the <link linkend="Qore_Socket_setCharset">Socket::setCharset()</link> method to set the character set encoding for the socket.  If a character set encoding is set, and string data is read with the <link linkend="Qore_Socket_recv">Socket::recv()</link> method, then it will be tagged with the encoding of the socket as well.</para>
    
    <para>Client applications should call <link linkend="Qore_Socket_connect">Socket::connect()</link> to connect to a remote port or a UNIX domain socket (socket file on the local server).</para>

    <para>Server applications should call <link linkend="Qore_Socket_bind">Socket::bind()</link>,  <link linkend="Qore_Socket_listen">Socket::listen()</link>, and  <link linkend="Qore_Socket_accept">Socket::accept()</link> in this order to accept incoming connections.  Normally a new thread should be started after the Socket::accept() call to handle the new connection in a separate thread (Socket::accept() returns a new Socket object for the accepted connection).</para>

    <table>
      <title>Qore::Socket Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	
	<tbody>
	  <row>
	    <entry><para><link linkend="Qore_Socket_constructor">Socket::constructor()</link></para></entry>
	    <entry>N</entry>
	    <entry><para>Creates the socket object</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_destructor">Socket::destructor()</link></para></entry>
	    <entry>N</entry>
	    <entry><para>Closes the socket if it's open and destroys the object.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_copy">Socket::copy()</link></para></entry>
	    <entry>N</entry>
	    <entry><para>Creates a new Socket object, not based on the parent.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_connect">Socket::connect()</link></para></entry>
	    <entry>N</entry>
	    <entry><para>Connects to a remote port or UNIX domain socket file.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_bind">Socket::bind()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Binds the socket to a port or UNIX domain socket file.  If the second parameter is True, then the socket will set the SO_REUSEADDR option, which will allow the socket to be bound to a port that is not yet closed (for example, in a TIME_WAIT state).</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_accept">Socket::accept()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Accepts connections on a listening socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_listen">Socket::listen()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Listens for connections on the socket</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_isDataAvailable">Socket::isDataAvailable()</link></para></entry>
	    <entry>N</entry>
	    <entry><para>Returns True or False depending on whether there is data to be read on the socket</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_send">Socket::send()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Sends string or binary data over the socket</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_sendi1">Socket::sendi1()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Sends a 1-byte integer over the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_sendi2">Socket::sendi2()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Sends a 2-byte integer in big-endian format (network byte order) over the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_sendi4">Socket::sendi4()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Sends a 4-byte integer in big-endian format (network byte order) over the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_sendi2LSB">Socket::sendi2LSB()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Sends a 2-byte integer in little-endian format over the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_sendi4LSB">Socket::sendi4LSB()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Sends a 4-byte integer in little-endian format over the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_sendHTTPMessage">Socket::sendHTTPMessage()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Sends an HTTP message with a method and user-defined headers given as a hash</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_sendHTTPResponse">Socket::sendHTTPResponse()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Sends an HTTP response with user-defined headers given as a hash</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_recv">Socket::recv()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Receives data from the socket and returns a string</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_recvi1">Socket::recvi1()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Receives a 1-byte integer from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_recvi2">Socket::recvi2()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Receives a 2-byte integer in big-endian format (network byte order) from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_recvi4">Socket::recvi4()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Receives a 4-byte integer in big-endian format (network byte order) from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_recvi2LSB">Socket::recvi2LSB()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Receives a 2-byte integer in little-endian format from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_recvi4LSB">Socket::recvi4LSB()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Receives a 4-byte integer in little-endian format from the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_recvBinary">Socket::recvBinary()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Receives data on a socket and returns a binary object</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_readHTTPHeader">Socket::readHTTPHeader()</link></para></entry>
	    <entry>Y</entry>
	    <entry><para>Retuns a hash representing the data in the HTTP header read</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_getPort">Socket::getPort()</link></para></entry>
	    <entry>N</entry>
	    <entry><para>Returns the port number of the socket for INET sockets.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_shutdown">Socket::shutdown()</link></para></entry>
	    <entry>N</entry>
	    <entry><para>Ensures that a socket will be closed even if shared with other processes.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_close">Socket::close()</link></para></entry>
	    <entry>N</entry>
	    <entry><para>Closes the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_getCharset">Socket::getCharset()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Returns the character set encoding for the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_setCharset">Socket::setCharset()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the character set encoding for the socket.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore_Socket_getSocket">Socket::getSocket()</link></para></entry>
	    <entry>N</entry>
	    <entry><para>Returns the socket file descriptor number.</para></entry>
	  </row>	
	</tbody>
      </tgroup>
    </table>
    
    <sect2 id="Qore_Socket_constructor">
      <title>Qore::Socket::constructor()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the socket object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Socket()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Object</entry>
	      <entry>The new Socket object created.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_destructor">
      <title>Qore::Socket::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the socket if it's open and destroys the object.  If the socket was a UNIX domain socket, and was created with <link linkend="Qore_Socket_bind">Socket::bind()</link>, then the socket file will be deleted as well.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore_Socket_copy">
      <title>Qore::Socket::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Socket object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::copy()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Socket::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Socket::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Socket Object</para></entry>
	      <entry><para>A new Socket object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_bind">
      <title>Qore::Socket::bind()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Binds the socket to a port or UNIX domain socket file.  If the second parameter is True, then the socket will set the SO_REUSEADDR option, which will allow the socket to be bound to a port that is not yet closed (for example, in a TIME_WAIT state).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::bind(<replaceable>port, [reuse_addr]</replaceable>)</programlisting>
	    <programlisting>Socket::bind(<replaceable>host_and_port, [reuse_addr]</replaceable>)</programlisting>
	    <programlisting>Socket::bind(<replaceable>filename, [reuse_addr]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::bind()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>port</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>A single integer will be taken as a port number on the local machine; all network interfaces will be bound with this port number.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>host_and_port</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If a colon appears in the string, the string will be assumed to be a hostname:port specification, and the port on the named ip address will be bound.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>filename</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If the string contains no colon, the socket will be bound to a UNIX domain socket file on the local filesystem with the given name.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[reuse_addr]</replaceable></para></entry>
	      <entry><para>Boolean</para></entry>
	      <entry><para>If this optional argument evaluates to True, the SO_REUSEADDR option will be set on the socket, which will allow the socket to be bound to a port that is not yet closed (for example, in a TIME_WAIT state).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::bind()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success, -1 for error.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::bind()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-BIND-PARAMETER-ERROR</para></entry>
	      <entry><para>No argument was passed to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_accept">
      <title>Qore::Socket::accept()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Accepts connections on a listening socket (see <link linkend="Qore_Socket_listen">Socket::listen()</link>).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::accept()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::accept()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::accept()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Socket Object</entry>
	      <entry>When a new connection has been accepted, a new Socket object is returned for the new connection.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::accept()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not bound.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_connect">
      <title>Qore::Socket::connect()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Connects the socket to a remote port or UNIX domain socket file.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::connect(<replaceable>string:host_and_port</replaceable>)</programlisting>
	    <programlisting>Socket::connect(<replaceable>string:filename</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::connect()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>host_and_port</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If a colon appears in the string, the string will be assumed to be a hostname:port specification to connect to.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>filename</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If the string contains no colon, the socket will try to connect to a UNIX domain socket file on the local filesystem with the given name.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::connect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success, -1 for error.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::connect()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-CONNECT-PARAMETER-ERROR</para></entry>
	      <entry><para>No argument was passed to the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_listen">
      <title>Qore::Socket::listen()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Listens for new connections on a bound socket (see <link linkend="Qore_Socket_bind">Socket::bind())</link></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::listen()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::listen()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::listen()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success, -1 for error.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::listen()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not bound.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_isDataAvailable">
      <title>Qore::Socket::isDataAvailable()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns True is data is available on the socket, takes an optional timeout.  Useful for non-blocking polling the socket for data (can also be used to poll for new connections before <link linkend="Qore_Socket_accept">Socket::accept()</link>).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::isDataAvailable(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::isDataAvailable()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>An optional timeout in milliseconds (1/1000 second).  If no timeout is given, the method returns immediately.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::isDataAvailable()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Boolean</entry>
	      <entry>True if data is available on the socket, False if not.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_send">
      <title>Qore::Socket::send()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends string or binary data over a connected socket.  If the argument is not present, or is neither a String or Binary type, an exception will be thrown.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::send(<replaceable>data</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::send()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>data</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>Sends the string data over the socket without the trailing null ('\0') character.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>data</replaceable></para></entry>
	      <entry><para>Binary</para></entry>
	      <entry><para>Sends the binary data over the socket.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::send()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>0 for success, -1 for error.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::send()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-SEND-PARAMETER-ERROR</para></entry>
	      <entry><para>No argument was passed to the method.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_sendi1">
      <title>Qore::Socket::sendi1()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 1-byte integer over the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendi1(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi1()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to send; only the least-significant byte will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success, -1 for error.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_sendi2">
      <title>Qore::Socket::sendi2()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 2-byte integer in big-endian format (network byte order) over the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendi2(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi2()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to send; only the least-significant 2-bytes will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success, -1 for error.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_sendi4">
      <title>Qore::Socket::sendi4()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 4-byte integer in big-endian format (network byte order) over the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendi4(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi4()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to send; only the least-significant 4-bytes will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success, -1 for error.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_sendi2LSB">
      <title>Qore::Socket::sendi2LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 2-byte integer in little-endian format over the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendi2LSB(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi2LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to send; only the least-significant 2-bytes will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success, -1 for error.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_sendi4LSB">
      <title>Qore::Socket::sendi4LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sends a 4-byte integer in little-endian format over the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendi4LSB(<replaceable>integer</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendi4LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>integer</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The integer to send; only the least-significant 4-bytes will be sent.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success, -1 for error.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_sendHTTPMessage">
      <title>Qore::Socket::sendHTTPMessage()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a properly-formatted HTTP message and sends it over the Socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendHTTPMessage(<replaceable>string:method, string:path, string:http_version, hash:headers, [body]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendHTTPMessage()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>method</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The HTTP method name to send (i.e. POST, HEAD, etc)</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>path</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The path component of the URL.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>http_version</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The HTTP protocol version (1.0 or 1.1).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>headers</replaceable></para></entry>
	      <entry><para>Hash</para></entry>
	      <entry><para>A hash of additional headers to send (key-value pairs).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[body]</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If present, the body to be sent with the message (if present, the Content-Length header will be automatically set).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[body]</replaceable></para></entry>
	      <entry><para>Binary</para></entry>
	      <entry><para>If present, the body to be sent with the message (if present, the Content-Length header will be automatically set).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendHTTPMessage()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.  If any errors occur, exceptions are raised.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendHTTPMessage()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-SENDHTTPMESSAGE-PARAMETER-ERROR</para></entry>
	      <entry><para>One or more of the required arguments is missing.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-SEND-ERROR</para></entry>
	      <entry><para>Send failed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_sendHTTPResponse">
      <title>Qore::Socket::sendHTTPResponse()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a properly-formatted HTTP response message and sends it over the Socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::sendHTTPResponse(<replaceable>status_code, string:description, string:http_version, hash:headers, [body]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::sendHTTPMessage()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>status_code</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The HTTP status code to send (i.e. 200, 404, etc)</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>description</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The descriptive text for the status code.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>http_version</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The HTTP protocol version (1.0 or 1.1).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>headers</replaceable></para></entry>
	      <entry><para>Hash</para></entry>
	      <entry><para>A hash of additional headers to send (key-value pairs).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[body]</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>If present, the body to be sent with the message (if present, the Content-Length header will be automatically set).</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[body]</replaceable></para></entry>
	      <entry><para>Binary</para></entry>
	      <entry><para>If present, the body to be sent with the message (if present, the Content-Length header will be automatically set).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::sendHTTPResponse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.  If any errors occur, exceptions are raised.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::sendHTTPResponse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-SENDHTTPRESPONSE-PARAMETER-ERROR</para></entry>
	      <entry><para>One or more of the required arguments is missing.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-SEND-ERROR</para></entry>
	      <entry><para>Send failed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_recv">
      <title>Qore::Socket::recv()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives data from the socket and returns a string.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recv(<replaceable>size, [timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recv()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>size</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The amount of data to read in bytes.  To read until the remote closes the connection, use -1.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recv()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>String</entry>
	      <entry>The data read, returned as a string.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recv()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-CLOSED</para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-RECV-ERROR</para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_recvBinary">
      <title>Qore::Socket::recvBinary()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives data from the socket and returns a binary object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvBinary(<replaceable>size, [timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvBinary()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>size</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The amount of data to read in bytes.  To read until the remote closes the connection, use -1.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Binary</entry>
	      <entry>The data read, returned as a binary object.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvBinary()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-CLOSED</para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-RECV-ERROR</para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_recvi1">
      <title>Qore::Socket::recvi1()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 1-byte integer from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvi1(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi1()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>The 1-byte integer read.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi1()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-CLOSED</para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-RECV-ERROR</para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_recvi2">
      <title>Qore::Socket::recvi2()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 2-byte integer in big-endian format (network byte order) from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvi2(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi2()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>The 2-byte integer read.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi2()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-CLOSED</para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-RECV-ERROR</para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_recvi4">
      <title>Qore::Socket::recvi4()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 4-byte integer in big-endian format (network byte order) from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvi4(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi4()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>The 4-byte integer read.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi4()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-CLOSED</para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-RECV-ERROR</para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_recvi2LSB">
      <title>Qore::Socket::recvi2LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 2-byte integer in little-endian format from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvi2LSB(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi2LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>The 2-byte integer read.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi2LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-CLOSED</para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-RECV-ERROR</para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_recvi4LSB">
      <title>Qore::Socket::recvi4LSB()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Receives a 4-byte integer in little-endian format from the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::recvi4LSB(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::recvi4LSB()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::recvi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>The 4-byte integer read.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::recvi4LSB()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-CLOSED</para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-RECV-ERROR</para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_readHTTPHeader">
      <title>Qore::Socket::readHTTPHeader()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Reads an HTTP header and returns a hash representing the data read.  Accepts an optional timeout value in milliseconds.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::readHTTPHeader(<replaceable>[timeout_ms]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::readHTTPHeader()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[timeout_ms]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout in milliseconds (1/1000 second).  If no timeout is passed, then the call will not time out and will not return until all the data has been read or the remote end closes the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::readHTTPHeader()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Hash</entry>
	      <entry>The return hash will contain keys for each header, plus an http_version key, giving the HTTP protocol version.  For HTTP responses, the following keys will be returned: status_code, status_message.  For outgoing HTTP messages, the following keys will be populated: method, path.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Socket::readHTTPHeader()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>SOCKET-NOT-OPEN</para></entry>
	      <entry><para>The socket is not connected.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-CLOSED</para></entry>
	      <entry><para>The remote end has closed the connection.</para></entry>
	    </row>
	    <row>
	      <entry><para>SOCKET-RECV-ERROR</para></entry>
	      <entry><para>There was an error receiving the data.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_getPort">
      <title>Qore::Socket::getPort()</title>      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the port number of the socket for INET sockets.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::getPort()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::getPort()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::getPort()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns the port number for an INET connection, -1 if no INET connection has been established.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_shutdown">
      <title>Qore::Socket::shutdown()</title>      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Ensures that a socket will be closed even if the file descriptor is shared with other processes (for example, after a call to <link linkend="fork">fork()</link>).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::shutdown()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::shutdown()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::shutdown()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success, -1 for error.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_close">
      <title>Qore::Socket::close()</title>      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes an open socket.  Also deletes the UNIX domain socket file if it was created by a call to <link linkend="Qore_Socket_bind">Socket::bind()</link></para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::close()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::close()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::close()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success, -1 for error.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_getCharset">
      <title>Qore::Socket::getCharset()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the character set encoding for the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::getCharset()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::getCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for Socket::getCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>The character set encoding for the file.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_setCharset">
      <title>Qore::Socket::setCharset()</title>
      
     <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the character set encoding for the socket.  If any string data is sent over the socket with <link linkend="Qore_Socket_send">Socket::send()</link>, then the character encoding will be automatically converted if needed.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::setCharset(<replaceable>string:encoding</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::setCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  
	  <tbody>
	    <row>
	      <entry><para><replaceable>encoding</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The character set encoding for the file.</para></entry>
	    </row>
	    
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Value for Socket::setCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method does not return any value.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore_Socket_getSocket">
      <title>Qore::Socket::getSocket()</title>      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the file descriptor number associated with the socket.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Socket::getSocket()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Socket::getSocket()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Socket::getSocket()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>The file descriptor associated to the socket.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>
    
  <sect1 id="Qore_SQL_Constants">
    <title>Qore::SQL Constants</title>

    <table>
      <title>Database Driver Constants in the Qore::SQL Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Constant</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	
	<tbody>
	  <row>
	    <entry><para>SQL::DSOracle</para></entry>
	    <entry><para>Indicates an Oracle database to the Datasource::constructor() method</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DSMySQL</para></entry>
	    <entry><para>Indicates an MySQL database to the Datasource::constructor() method</para></entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>

    <table id="DBI_Capability_Constants">
      <title>DBI Capability Constant Codes in the Qore::SQL Namespace</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Constant</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	
	<tbody>
	  <row>
	    <entry><para>SQL::DBI_CAP_CHARSET_SUPPORT</para></entry>
	    <entry><para>Indicates that the DBI driver supports proper character set encoding conversions.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DBI_CAP_TRANSACTION_MANAGEMENT</para></entry>
	    <entry><para>Indicates that the DBI driver supports transaction management.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DBI_CAP_STORED_PROCEDURES</para></entry>
	    <entry><para>Indicates that the DBI driver supports stored procedure execution.</para></entry>
	  </row>
	  <row>
	    <entry><para>SQL::DBI_CAP_LOB_SUPPORT</para></entry>
	    <entry><para>Indicates that the DBI driver supports *LOB columns.</para></entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>
  </sect1>

  <sect1 id="Qore::SQL::Datasource_Class">
    <title>Qore::SQL::Datasource Class</title>
    
    <para>Datasource objects allow Qore programs to access databases through a Qore database driver.</para>

    <para>Datasource objects will implicitly call <link linkend="Qore::SQL::Datasource::open">Datasource::open()</link> if no connection has yet been established and a method is called requiring a connection to the database server.  Therefore any method that requires communication with the database server can also throw any exception that the open method can throw.</para>

    <para>Database objects have an internal transaction lock which will be grabbed when the <link linkend="Qore::SQL::Datasource::exec">Datasource::exec()</link> or <link linkend="Qore::SQL::Datasource::beginTransaction">Datasource::beginTransaction()</link> methods are executed and autocommit is not enabled. This enables a single datasource to be used for transaction management by several threads simultaneously.  Note that an exeption in a Datasource::exec() call, if the transaction lock is not already held, will have the effect that the transaction lock is not acquired.</para>

    <para>Another thread attempting to start transaction management (calling the methods listed above while autocommit is disabled) will block until the thread holding the lock calls <link linkend="Qore::SQL::Datasource::commit">Datasource::commit()</link> or <link linkend="Qore::SQL::Datasource::rollback">Datasource::rollback()</link>, which release the transaction lock.</para>
    
    <para>There is a timeout associated with the transaction lock; if a thread waits for the transaction lock for more than the timeout period, then an exception will be raised in the waiting thread. The timeout value can be read and changed with the <link linkend="Qore::SQL::Datasource::getTransactionLockTimeout">Datasource::getTransactionLockTimeout()</link> and <link linkend="Qore::SQL::Datasource::setTransactionLockTimeout">Datasource::setTransactionLockTimeout()</link> methods, respectively. The default transaction timeout value is 120 seconds.</para>
    
    <para>Only databases with an existing Qore DBI driver can be accessed through the Qore Datasource class.  DBI drivers shipping with Qore include <link linkend="mysql_Module">mysql</link> and <link linkend="mysql_Module">oracle</link>.  Each Qore DBI driver may support only a subset of all possible features.  Use the following functions to query DBI driver capabilities: <link linkend="getDBIDriverCapabilities">getDBIDriverCapabilities()</link>, <link linkend="getDBIDriverCapabilityList">getDBIDriverCapabilityList()</link>, and <link linkend="getDBIDriverList">getDBIDriverList()</link>.  See <link linkend="DBI_Capability_Constants">DBI Capability Constants</link> for a table of DBI driver capability codes.</para>

    <table>
      <title>Qore::SQL::Datasource Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::constructor">Datasource::constructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry>Creates the Datasource object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::destructor">Datasource::destructor()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry>Destroys the object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::copy">Datasource::copy()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry>Creates a new Datasource object with the same driver as the original and copies of all the connection parameters.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::open">Datasource::open()</link></para></entry>
	    <entry>Y</entry>
	    <entry>Opens a connection to a database.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::close">Datasource::close()</link></para></entry>
	    <entry>N</entry>
	    <entry>Closes the connection to the database.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::commit">Datasource::commit()</link></para></entry>
	    <entry>Y</entry>
	    <entry>Commits the transaction and releases the transaction lock.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::rollback">Datasource::rollback()</link></para></entry>
	    <entry>Y</entry>
	    <entry>Rolls back the transaction and releases the transaction lock.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::setAutoCommit">Datasource::setAutoCommit()</link></para></entry>
	    <entry>N</entry>
	    <entry>Turns autocommit on or off for this object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::exec">Datasource::exec()</link></para></entry>
	    <entry>Y</entry>
	    <entry>Executes SQL code on the DB connection.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::select">Datasource::select()</link></para></entry>
	    <entry>Y</entry>
	    <entry>Executes a select statement on the server and returns the results in a hash (column names) of lists (rows).</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::selectRows">Datasource::selectRows()</link></para></entry>
	    <entry>Y</entry>
	    <entry>Executes a select statement on the server and returns the results in a list (rows) of hashes (column names and values).</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::beginTransaction">Datasource::beginTransaction()</link></para></entry>
	    <entry><para>Y</para></entry>
	    <entry><para>Manually grabs the transaction lock</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::setUserName">Datasource::setUserName()</link></para></entry>
	    <entry>N</entry>
	    <entry>Sets the username parameter for the next open.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::getUserName">Datasource::getUserName()</link></para></entry>
	    <entry>N</entry>
	    <entry>Returns the username parameter.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::setPassword">Datasource::setPassword()</link></para></entry>
	    <entry>N</entry>
	    <entry>Sets the password parameter for the next open.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::getPassword">Datasource::getPassword()</link></para></entry>
	    <entry>N</entry>
	    <entry>Returns the password parameter.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::setDBName">Datasource::setDBName()</link></para></entry>
	    <entry>N</entry>
	    <entry>Sets the DB name parameter for the next open.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::getDBName">Datasource::getDBName()</link></para></entry>
	    <entry>N</entry>
	    <entry>Returns the dbname parameter.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::setDBCharset">Datasource::setDBCharset()</link></para></entry>
	    <entry>N</entry>
	    <entry>Sets the charset parameter for the next open.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::getDBCharset">Datasource::getDBCharset()</link></para></entry>
	    <entry>N</entry>
	    <entry>Returns the DBI driver specific charset name for the current connection.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::getOSCharset">Datasource::getOSCharset()</link></para></entry>
	    <entry>N</entry>
	    <entry>Returns the Qore charset name for the current connection.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::setHostName">Datasource::setHostName()</link></para></entry>
	    <entry>N</entry>
	    <entry>Sets the hostname parameter for the next open.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::getHostName">Datasource::getHostName()</link></para></entry>
	    <entry>N</entry>
	    <entry>Returns the hostname parameter.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::setTransactionLockTimeout">Datasource::setTransactionLockTimeout()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Sets the transaction timeout value in seconds.  Set to 0 for no timeout.</para></entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::SQL::Datasource::getTransactionLockTimeout">Datasource::getTransactionLockTimeout()</link></para></entry>
	    <entry><para>N</para></entry>
	    <entry><para>Retrieves the transaction timeout value in seconds.</para></entry>
	  </row>
	  
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Qore::SQL::Datasource::constructor">
      <title>Qore::SQL::Datasource::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a Datasource object. The constructor requires the datasource type as the first argument</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Datasource(<replaceable>driver_name</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Datasource::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>driver_name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The name of the DBI driver for the Datasource.  See <link linkend="Qore_SQL_Constants">SQL Constants</link> for builtin constants for DBI drivers shipped with Qore, or see the DBI driver documentation to use an add-on driver.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Object</para></entry>
	      <entry><para>The Datasource object created</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::destructor">
      <title>Qore::SQL::Datasource::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the datasource if it's open (if any operations are in progress, will block until the operations complete) and destroys the object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::copy">
      <title>Qore::SQL::Datasource::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Datasource object with the same driver as the original and copies of all the connection parameters.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::copy()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Datasource::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Datasource::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Datasource Object</para></entry>
	      <entry><para>Returns a new Datasource object with the same driver as the original and copies of all the connection parameters.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::beginTransaction">
      <title>Qore::SQL::Datasource::beginTransaction()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Manually grabs the transaction lock.  This method should be called when the Datasource object will be shared between more than 1 thread, and a transaction will be started with a <link linkend="Qore::SQL::Datasource::select">Datasource::select()</link> method.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::beginTransaction()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::beginTransaction()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::beginTransaction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::beginTransaction()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>AUTOCOMMIT-ERROR</para></entry>
	      <entry><para>Cannot grab the transaction lock on a datasource when autocommit is enabled.</para></entry>
	    </row>
	    <row>
	      <entry><para>TRANSACTION-TIMEOUT</para></entry>
	      <entry><para>Timeout trying to acquire the transaction lock.</para></entry>
	    </row>
´	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::open">
      <title>Qore::SQL::Datasource::open()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Opens a connection to the datasouce, using the connection parameters already set.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::open()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::open()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::open()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success, -1 for error.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::open()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
´	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::close">
      <title>Qore::SQL::Datasource::close()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Closes the connection to the database.  If any actions are in progress on the database, the close call will block until the actions complete.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::close()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::close()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::close()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>0 for success, -1 for not open.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore::SQL::Datasource::commit">
      <title>Qore::SQL::Datasource::commit()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Commits the current transaction and releases the transaction lock.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::commit()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::commit()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::commit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>0 for success, -1 for not open.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::commit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>TRANSACTION-TIMEOUT</para></entry>
	      <entry><para>Timeout trying to acquire the transaction lock.</para></entry>
	    </row>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
´	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::rollback">
      <title>Qore::SQL::Datasource::rollback()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Rolls back the current transaction and releases the transaction lock.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::rollback()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::rollback()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::rollback()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>0 for success, -1 for not open.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::rollback()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>TRANSACTION-TIMEOUT</para></entry>
	      <entry><para>Timeout trying to acquire the transaction lock.</para></entry>
	    </row>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
´	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::setAutoCommit">
      <title>Qore::SQL::Datasource::setAutoCommit()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Turns autocommit on or off for this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::setAutoCommit(<replaceable>status</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setAutoCommit()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>status</replaceable></para></entry>
	      <entry><para>Boolean</para></entry>
	      <entry><para>True to turn on autocommit (a commit will be executed after every <link linkend="Qore::SQL::Datasource::exec">Datasource::exec()</link>), False to turn off autocommit (commits must be manually triggered).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::setAutoCommit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::exec">
      <title>Qore::SQL::Datasource::exec()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Grabs the transaction lock (if autocommit is disabled) and executes an SQL command on the server and returns either the row count (for example, for updates and inserts) or the data retrieved (for example, if a stored procedure is executed that returns values).  This method takes a special syntax for binding values and placeholders, similar to printf() functions.</para>
	    <para>For binding values directly, use <code>%v</code> in the command string, and include the value as an argument after the string.</para>
	    <para>For binding placeholders for output variables, write a unique name in the string and prefix it with a colon (ex: <code>:code</code>).  In this case the method will return a hash of the output variables using the placeholder names as keys, but without the colon prefix.  By default, a string type will be bound to the position.  To bind other variable types to placeholder positions, include the type constant (see <link linkend="Qore_Type_Constants">Type Constants</link>) as an argument after the command string.  For BLOBs, use Binary, for CLOBs, use the string "clob" (constants will be provided in a future release).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::exec(<replaceable>sql_command, [bind_and_or_placeholder_list]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::exec()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>sql_command</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The SQL command to execute on the server.</para></entry>
	    </row>
	    <row>
	      <entry><para><replaceable>[bind_and_or_placeholder_list]</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>Include any values to be bound (using <code>%v</code> in the command string) or placeholder specifications (using :&lt;key_name&gt; in the command string) in order after the command string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::exec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer or Hash</entry>
	      <entry>For commands with placeholders, a hash is returned holding the values acquired from executing the SQL statement.  For all other commands, a row count is returned.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::exec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>TRANSACTION-TIMEOUT</para></entry>
	      <entry><para>Timeout trying to acquire the transaction lock.</para></entry>
	    </row>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
´	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::select">
      <title>Qore::SQL::Datasource::select()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Executes an SQL select statement on the server and returns the result as a hash (column names) of lists (rows).  This format is suitable for use with <link linkend="context_Statements"><command>context</command> Statements</link>, for easy iteration and processing of query results.  Additionally, this format is more efficient format than that returned by the <link linkend="Qore::SQL::Datasource::selectRows">Datasource::selectRows()</link> method, because the column names are not repeated for each row returned.  Therefore, for retrieving anything greater than small amounts of data, it is recommended to use this method instead of <link linkend="Qore::SQL::Datasource::selectRows">Datasource::selectRows()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::select(<replaceable>select_statement</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::select()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>select_statement</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>SQL select statement to execute on the server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::select()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Hash</entry>
	      <entry>Returns a hash (the keys are the column names) of lists (each hash key's value is a list giving the row data).</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::select()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
´	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::selectRows">
      <title>Qore::SQL::Datasource::selectRows()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Executes an SQL select statement on the server and returns the result as a list (rows) of hashes (the column values).  This format is not as efficient as that returned by the <link linkend="Qore::SQL::Datasource::select">Datasource::select()</link> method, therefore for larger amounts of data, it is recommended to use <link linkend="Qore::SQL::Datasource::select">Datasource::select()</link>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::selectRows(<replaceable>select_statement</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::selectRows()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>select_statement</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>SQL select statement to execute on the server.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::selectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>List</entry>
	      <entry>Returns a list (the rows returned) of hashes (column values).</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Datasource::selectRows()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>depends on DBI driver</para></entry>
	      <entry><para>See documentation for the DBI driver for driver-specific exceptions.</para></entry>
	    </row>
´	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::setTransactionLockTimeout">
      <title>Qore::SQL::Datasource::setTransactionLockTimeout()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the transaction timeout value in seconds.  Set to 0 for no timeout.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::setTransactionLockTimeout(<replaceable>timeout</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setTransactionLockTimeout()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>timeout</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The timeout value to set in seconds.  For no timeout, set to 0.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::setTransactionLockTimeout()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore::SQL::Datasource::getTransactionLockTimeout">
      <title>Qore::SQL::Datasource::getTransactionLockTimeout()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the transaction timeout value in seconds.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getTransactionLockTimeout()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getTransactionLockTimeout()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getTransactionLockTimeout()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>The transaction timeout value in seconds.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore::SQL::Datasource::setUserName">
      <title>Qore::SQL::Datasource::setUserName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the username to use for the connection.  Invalid usernames will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::setUserName(<replaceable>username</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setUserName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>username</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The username to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::setUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::getUserName">
      <title>Qore::SQL::Datasource::getUserName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the username parameter for connections to the database.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getUserName()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getUserName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getUserName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>String</entry>
	      <entry>The username connection parameter.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore::SQL::Datasource::setPassword">
      <title>Qore::SQL::Datasource::setPassword()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the password to use for the connection.  Invalid passwords will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::setPassword(<replaceable>password</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setPassword()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>password</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The password name to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::setPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::getPassword">
      <title>Qore::SQL::Datasource::getPassword()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the password connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getPassword()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getPassword()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getPassword()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>String</entry>
	      <entry>Retrieves the password connection parameter.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore::SQL::Datasource::setDBName">
      <title>Qore::SQL::Datasource::setDBName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the database name to use for the connection.  Invalid database names will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::setDBName(<replaceable>dbname</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setDBName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>dbname</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The database name to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::setDBName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::getDBName">
      <title>Qore::SQL::Datasource::getDBName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the dbname connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getDBName()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getDBName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getDBName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>String</entry>
	      <entry>Retrieves the password connection parameter.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore::SQL::Datasource::setDBCharset">
      <title>Qore::SQL::Datasource::setDBCharset()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the database character set encoding to use for the connection.  Invalid character set encoding names will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::setDBCharset(<replaceable>db_encoding_name</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setDBCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>db_encoding_name</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The database-specific name for the encoding to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::setDBCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::setHostName">
      <title>Qore::SQL::Datasource::setHostName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Sets the hostname to use for the connection (for DBI drivers that support this parameter. such as the <link linkend="mysql_Module">MySQL Module</link>).  Invalid hostnames will cause an exception to be thrown when the connection is opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::setHostName(<replaceable>hostname</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::setHostName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>hostname</replaceable></para></entry>
	      <entry><para>String</para></entry>
	      <entry><para>The hostname to be used for the connection.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::setHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method does not return any value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::getDBCharset">
      <title>Qore::SQL::Datasource::getDBCharset()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the database-specific charset set encoding for the current connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getDBCharset()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getDBCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getDBCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>String</entry>
	      <entry>Retrieves the database-specific charset set encoding for the current connection.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore::SQL::Datasource::getOSCharset">
      <title>Qore::SQL::Datasource::getOSCharset()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the Qore charset set encoding for the current connection.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getOSCharset()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getOSCharset()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getOSCharset()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>String</entry>
	      <entry>Retrieves the Qore charset set encoding for the current connection.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::SQL::Datasource::getHostName">
      <title>Qore::SQL::Datasource::getHostName()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Retrieves the hostname connection parameter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Datasource::getHostName()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Datasource::getHostName()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Datasource::getHostName()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>String</entry>
	      <entry>Retrieves the hostname connection parameter.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="Qore::Thread::Condition_Class">
    <title>Qore::Thread::Condition Class</title>

    <para>Condition objects, when used along with a <link linkend="Qore::Thread::Mutex_Class">Mutex</link> object, allow Qore threads to sleep until a certain condition becomes true.</para>

    <table>
      <title>Qore::Thread::Condition Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Condition::constructor">Condition::constructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates the Condition object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Condition::destructor">Condition::destructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Destroys the Condition object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Condition::copy">Condition::copy()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates a new Condition object, not based on the original.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Condition::signal">Condition::signal()</link></para></entry>
	    <entry>Y</entry>
	    <entry>Signals a single blocked thread to wake up.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Condition::broadcast">Condition::broadcast()</link></para></entry>
	    <entry>Y</entry>
	    <entry>Signals all threads blocked on this Condition object to wake up.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Condition::wait">Condition::wait()</link></para></entry>
	    <entry>Y</entry>
	    <entry>Blocks a thread until signaled.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Qore::Thread::Condition::constructor">
      <title>Qore::Thread::Condition::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Condition object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Condition()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Condition::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Condition::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Condition Object</entry>
	      <entry>The new Condition object.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore::Thread::Condition::destructor">
      <title>Qore::Thread::Condition::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore::Thread::Condition::copy">
      <title>Qore::Thread::Condition::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Condition object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Condition::copy()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Condition::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Condition::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Condition Object</para></entry>
	      <entry><para>A new Condition object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::Condition::signal">
      <title>Qore::Thread::Condition::signal()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Signals a single blocked thread to wake up.  Normally this method call will be made while the same Mutex object used for <link linkend="Qore::Thread::Condition::wait">Condition::wait()</link> calls is locked.  Then, when the thread calling this method unlocks the Mutex object, the thread(s) woken up by this call can continue executing.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Condition::signal()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Condition::signal()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Condition::signal()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no values.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Condition::signal()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>CONDITION-SIGNAL-ERROR</para></entry>
	      <entry><para>This exception should never be thrown - it indicates a low-level error in executing the method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::Condition::broadcast">
      <title>Qore::Thread::Condition::broadcast()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Wakes up all threads waiting on the Condition object.  Normally this method call will be made while the same Mutex object used for <link linkend="Qore::Thread::Condition::wait">Condition::wait()</link> calls is locked.  Then, when the thread calling this method unlocks the Mutex object, the thread(s) woken up by this call can continue executing.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Condition::broadcast()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Condition::broadcast()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Condition::broadcast()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no values.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Condition::broadcast()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>CONDITION-BROADCAST-ERROR</para></entry>
	      <entry><para>This exception should never be thrown - it indicates a low-level error in executing the method.</para></entry>
	    </row>
´	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::Condition::wait">
      <title>Qore::Thread::Condition::wait()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Blocks a thread on the Condition object.  Must be called with a <link linkend="Qore::Thread::Mutex_Class">Mutex</link> argument, and the Mutex must be locked before the call.  This method will atomically unlock the Mutex object and wait on this Condition object to be woken up with a <link linkend="Qore::Thread::Condition::signal">Condition::signal()</link> or <link linkend="Qore::Thread::Condition::broadcast">Condition::broadcast()</link> method call in another thread.  At this point, the Mutex will be reacquired before control returns to the blocked thread.  The wait condition should always be tested again when the thread is unblocked.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Condition::wait(<replaceable>mutex</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Condition::wait()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>mutex</replaceable></para></entry>
	      <entry><para>Mutex Object</para></entry>
	      <entry><para>The Mutex object to use for synchronization on this Condition object.  The Mutex must be locked before calling this method.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Condition::wait()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>0 for success, -1 for errors.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Condition::wait()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>CONDITION-WAIT-ERROR</para></entry>
	      <entry><para>This exception should never be thrown - it indicates a low-level error in executing the method.</para></entry>
	    </row>
´	  </tbody>
	</tgroup>
      </table>
    </sect2>

  </sect1>
  <sect1 id="Qore::Thread::Counter_Class">
    <title>Qore::Thread::Counter Class</title>

    <para>Counter objects allow Qore threads to sleep until a counter reaches zero.</para>

    <table>
      <title>Qore::Thread::Counter Method Overview</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Counter::constructor">Counter::constructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates the Counter object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Counter::destructor">Counter::destructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Destroys the Counter object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Counter::copy">Counter::copy()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates a new Counter object, not based on the original.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Counter::inc">Counter::inc()</link></para></entry>
	    <entry>N</entry>
	    <entry>Atomically increments the counter value.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Counter::dec">Counter::dec()</link></para></entry>
	    <entry>N</entry>
	    <entry>Atomically decrements the counter value.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Counter::waitForZero">Counter::waitForZero()</link></para></entry>
	    <entry>N</entry>
	    <entry>Blocks a thread until the counter reaches zero.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Counter::getCount">Counter::getCount()</link></para></entry>
	    <entry>N</entry>
	    <entry>Returns the current counter value.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Qore::Thread::Counter::constructor">
      <title>Qore::Thread::Counter::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Counter object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Counter()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Counter::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Counter::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Counter Object</entry>
	      <entry>The new object created.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore::Thread::Counter::destructor">
      <title>Qore::Thread::Counter::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore::Thread::Counter::copy">
      <title>Qore::Thread::Counter::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Counter object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Counter::copy()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Counter::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Counter::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Counter Object</para></entry>
	      <entry><para>A new Counter object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::Counter::inc">
      <title>Qore::Thread::Counter::inc()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Atomically increments the counter value.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Counter::inc()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Counter::inc()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Counter::inc()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore::Thread::Counter::dec">
      <title>Qore::Thread::Counter::dec()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Atomically decrements the counter value.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Counter::dec()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Counter::dec()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Counter::dec()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore::Thread::Counter::waitForZero">
      <title>Qore::Thread::Counter::waitForZero()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Blocks a thread until the counter reaches zero.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Counter::waitForZero()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Counter::waitForZero()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Counter::waitForZero()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore::Thread::Counter::getCount">
      <title>Qore::Thread::Counter::getCount()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the current counter value.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Counter::getCount()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Counter::getCount()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Counter::getCount()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>The current counter value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="Qore::Thread::Queue_Class">
    <title>Qore::Thread::Queue Class</title>

    <para>Queue objects provide a blocking, thread-safe message-passing object to Qore programs.</para>

    <table>
      <title>Qore::Thread::Queue Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Queue::constructor">Queue::constructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates the Queue object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Queue::destructor">Queue::destructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Destroys the Queue object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Queue::copy">Queue::copy()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates a new Queue object, not based on the original.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Queue::get">Queue::get()</link></para></entry>
	    <entry>N</entry>
	    <entry>Blocks until at least one entry is available on the queue, then returns the first entry in the queue.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Queue::pop">Queue::pop()</link></para></entry>
	    <entry>N</entry>
	    <entry>Blocks until at least one entry is available on the queue, then returns the last entry in the queue.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Queue::push">Queue::push()</link></para></entry>
	    <entry>N</entry>
	    <entry>Puts a value on the end of the queue.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Queue::size">Queue::size()</link></para></entry>
	    <entry>N</entry>
	    <entry>Returns the number of elements in the queue.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Qore::Thread::Queue::constructor">
      <title>Qore::Thread::Queue::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Queue object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Queue()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Queue::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Queue::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Queue Object</entry>
	      <entry>The new object created.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore::Thread::Queue::destructor">
      <title>Qore::Thread::Queue::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore::Thread::Queue::copy">
      <title>Qore::Thread::Queue::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Queue object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Queue::copy()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Queue::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Queue::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Queue Object</para></entry>
	      <entry><para>A new Queue object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::Queue::get">
      <title>Qore::Thread::Queue::get()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Blocks until at least one entry is available on the queue, then returns the first entry in the queue.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Queue::get()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Queue::get()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Queue::get()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Any</entry>
	      <entry>Depends on the value put on the queue.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore::Thread::Queue::pop">
      <title>Qore::Thread::Queue::pop()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Blocks until at least one entry is available on the queue, then returns the last entry in the queue.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Queue::pop()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Queue::pop()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Queue::pop()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Any</entry>
	      <entry>Depends on the value put on the queue.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore::Thread::Queue::push">
      <title>Qore::Thread::Queue::push()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Adds a value to the end of the queue.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Queue::push(<replaceable>value</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Queue::push()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>value</replaceable></para></entry>
	      <entry><para>Any</para></entry>
	      <entry><para>Value to be put on the queue.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Queue::push()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::Queue::size">
      <title>Qore::Thread::Queue::size()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of elements in the queue.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Queue::size()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Queue::size()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Queue::size()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>The number of elements in the queue.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="Qore::Thread::RWLock_Class">
    <title>Qore::Thread::RWLock Class</title>

    <para>The RWLock class 
    implements a read-write lock for efficient thread locking when writes are less 
    common than reads and reads must be atomic. When a thread holds the write lock, 
    no other thread can grab the read or write lock. Multiple threads can hold the 
    read lock at one time.</para>

    <para>This read-write lock favors readers, so the read lock can be safely acquired recursively.</para>

    <table>
      <title>Qore::Thread::RWLock Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>

	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RWLock::constructor">RWLock::constructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates the RWLock object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RWLock::destructor">RWLock::destructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Destroys the RWLock object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RWLock::copy">RWLock::copy()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates a new RWLock object, not based on the original.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RWLock::readLock">RWLock::readLock()</link></para></entry>
	    <entry>N</entry>
	    <entry>Acquires the read lock or increments the read lock counter; blocks if the write lock is already acquired.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RWLock::readUnlock">RWLock::readUnlock()</link></para></entry>
	    <entry>N</entry>
	    <entry>Decrements the read lock counter and releases the read lock if the counter is zero.  If at least one thread is blocked trying to acquire the write lock and the read counter reaches zero, then one thread waiting on the write lock is woken up.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RWLock::writeLock">RWLock::writeLock()</link></para></entry>
	    <entry>N</entry>
	    <entry>Acquires the write lock; blocks if either the read lock or write lock is already acquired.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RWLock::writeUnlock">RWLock::writeUnlock()</link></para></entry>
	    <entry>N</entry>
	    <entry>Releases the write lock, if any writers are waiting, then wakes one up, otherwise if any readers are waiting, wakes up all readers.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RWLock::tryReadLock">RWLock::tryReadLock()</link></para></entry>
	    <entry>N</entry>
	    <entry>Acquires the read lock only if it can be acquired immediately.  Returns 0 for success (read lock acquired, read lock count incremented) or -1 if the call would block.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RWLock::tryWriteLock">RWLock::tryWriteLock()</link></para></entry>
	    <entry>N</entry>
	    <entry>Acquires the write lock only if it can be acquired immediately.  Returns 0 for success (write lock acquired) or -1 if the call would block.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RWLock::numReaders">RWLock::numReaders()</link></para></entry>
	    <entry>N</entry>
	    <entry>Returns the read lock count.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Qore::Thread::RWLock::constructor">
      <title>Qore::Thread::RWLock::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the RWLock object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> RWLock()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>RWLock Object</entry>
	      <entry>The object created.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore::Thread::RWLock::destructor">
      <title>Qore::Thread::RWLock::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore::Thread::RWLock::copy">
      <title>Qore::Thread::RWLock::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new RWLock object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::copy()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for RWLock::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for RWLock::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>RWLock Object</para></entry>
	      <entry><para>A new RWLock object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::RWLock::readLock">
      <title>Qore::Thread::RWLock::readLock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the read lock or increments the read lock counter; blocks if the write lock is already acquired.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::readLock()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::readLock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::readLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore::Thread::RWLock::readUnlock">
      <title>Qore::Thread::RWLock::readUnlock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Decrements the read lock counter and releases the read lock if the counter is zero.  If at least one thread is blocked trying to acquire the write lock and the read counter reaches zero, then one thread waiting on the write lock is woken up.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::readUnlock()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::readUnlock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::readUnlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore::Thread::RWLock::writeLock">
      <title>Qore::Thread::RWLock::writeLock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the write lock; blocks if either the read lock or write lock is already acquired.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::writeLock()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::writeLock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::writeLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore::Thread::RWLock::writeUnlock">
      <title>Qore::Thread::RWLock::writeUnlock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Releases the write lock, if any writers are waiting, then wakes one up, otherwise if any readers are waiting, wakes up all readers.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::writeUnlock()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::writeUnlock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::writeUnlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore::Thread::RWLock::tryReadLock">
      <title>Qore::Thread::RWLock::tryReadLock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the read lock only if it can be acquired immediately.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::tryReadLock()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::writeUnlock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::writeUnlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success (read lock acquired, read lock count incremented) or -1 if the call would block.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore::Thread::RWLock::tryWriteLock">
      <title>Qore::Thread::RWLock::tryWriteLock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the write lock only if it can be acquired immediately.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::tryWriteLock()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::tryWriteLock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::tryWriteLock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success (write lock acquired) or -1 if the call would block.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore::Thread::RWLock::numReaders">
      <title>Qore::Thread::RWLock::numReaders()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the read lock count.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RWLock::numReaders()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RWLock::numReaders()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RWLock::numReaders()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>The read lock count.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="Qore::Thread::Mutex_Class">
    <title>Qore::Thread::Mutex Class</title>

    <para>The Mutex class implements a mutual-exclusion lock for thread locking.</para>

    <table>
      <title>Qore::Thread::Mutex Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Mutex::constructor">Mutex::constructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates the Mutex object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Mutex::destructor">Mutex::destructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Destroys the Mutex object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Mutex::copy">Mutex::copy()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates a new Mutex object, not based on the original.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Mutex::lock">Mutex::lock()</link></para></entry>
	    <entry>N</entry>
	    <entry>Locks the Mutex object.  Blocks if the lock is already held.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Mutex::unlock">Mutex::unlock()</link></para></entry>
	    <entry>N</entry>
	    <entry>Unlocks the Mutex object.  Wakes up one thread if any threads are blocked on this lock.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Mutex::trylock">Mutex::trylock()</link></para></entry>
	    <entry>N</entry>
	    <entry>Acquires the lock only if it is not already held by another thread.  Returns 0 for success (lock acquired) or -1 if the call would block.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Qore::Thread::Mutex::constructor">
      <title>Qore::Thread::Mutex::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates the Mutex object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Mutex()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Mutex::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Mutex::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Mutex Object</entry>
	      <entry>The new object created.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore::Thread::Mutex::destructor">
      <title>Qore::Thread::Mutex::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore::Thread::Mutex::copy">
      <title>Qore::Thread::Mutex::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Mutex object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Mutex::copy()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Mutex::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Mutex::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Mutex Object</para></entry>
	      <entry><para>A new Mutex object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::Mutex::lock">
      <title>Qore::Thread::Mutex::lock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Locks the Mutex object.  Blocks if the lock is already held.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Mutex::lock()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Mutex::lock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Mutex::lock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore::Thread::Mutex::unlock">
      <title>Qore::Thread::Mutex::unlock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Unlocks the Mutex object.  Wakes up one thread if any threads are blocked on this lock.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Mutex::unlock()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Mutex::unlock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Mutex::unlock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
    <sect2 id="Qore::Thread::Mutex::trylock">
      <title>Qore::Thread::Mutex::trylock()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the lock only if it is not already held by another thread.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Mutex::trylock()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Mutex::trylock()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Mutex::trylock()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success (lock acquired) or -1 if the call would block.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>
  </sect1>

  <sect1 id="Qore::Thread::RMutex_Class">
    <title>Qore::Thread::RMutex Class</title>
    <para>The RMutex class implements a recursive thread lock.  Once a thread grabs the lock, it can call the RMutex::enter() method again without blocking.  Other threads that try to enter the lock will block until the thread holding the lock calls RMutex::exit() an equal number of times to the RMutex::enter() calls.</para>

    <table>
      <title>Qore::Thread::RMutex Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RMutex::constructor">RMutex::constructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates a new RMutex object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RMutex::destructor">RMutex::destructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Destroys the RMutex object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RMutex::copy">RMutex::copy()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates a new RMutex object, not based on the original.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RMutex::enter">RMutex::enter()</link></para></entry>
	    <entry>N</entry>
	    <entry>Acquires the lock or increments the lock count if already acquired by this thread.  If acquired by another thread, then the call blocks until the lock count reaches zero.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::RMutex::exit">RMutex::exit()</link></para></entry>
	    <entry>N</entry>
	    <entry>Decrements the lock count, if the result is zero, and there are blocked threads, wakes up one thread.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
    
    <sect2 id="Qore::Thread::RMutex::constructor">
      <title>Qore::Thread::RMutex::constructor()</title>
      
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new RMutex object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> RMutex()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RMutex::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RMutex::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>RMutex Object</entry>
	      <entry>The new object created.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::RMutex::destructor">
      <title>Qore::Thread::RMutex::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore::Thread::RMutex::copy">
      <title>Qore::Thread::RMutex::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new RMutex object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RMutex::copy()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for RMutex::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for RMutex::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>RMutex Object</para></entry>
	      <entry><para>A new RMutex object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::RMutex::enter">
      <title>Qore::Thread::RMutex::enter()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the lock or increments the lock count if already acquired by this thread.  If acquired by another thread, then the call blocks until the lock count reaches zero.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RMutex::enter()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RMutex::enter()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RMutex::enter()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::RMutex::exit">
      <title>Qore::Thread::RMutex::exit()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Decrements the lock count, if the result is zero, and there are blocked threads, wakes up one thread.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>RMutex::exit()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for RMutex::exit()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for RMutex::exit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 id="Qore::Thread::Sequence_Class">
    <title>Qore::Thread::Sequence Class</title>

    <para>The Sequence class implements a thread-safe increment-only object.</para>

    <table>
      <title>Qore::Thread::Sequence Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Sequence::constructor">Sequence::constructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates a new Sequence object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Sequence::destructor">Sequence::destructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Destroys the Sequence object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Sequence::copy">Sequence::copy()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates a new Sequence object, not based on the original.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Sequence::next">Sequence::next()</link></para></entry>
	    <entry>N</entry>
	    <entry>Atomically increments the counter and returns the last value.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Sequence::getCurrent">Sequence::getCurrent()</link></para></entry>
	    <entry>N</entry>
	    <entry>Returns the current value of the counter.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 id="Qore::Thread::Sequence::constructor">
      <title>Qore::Thread::Sequence::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Sequence object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Sequence(<replaceable>[start]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Sequence::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[start]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>Optional start number for the sequence (default = 0).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Sequence::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Sequence Object</entry>
	      <entry>The new object created.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::Sequence::destructor">
      <title>Qore::Thread::Sequence::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore::Thread::Sequence::copy">
      <title>Qore::Thread::Sequence::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Sequence object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Sequence::copy()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Sequence::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Sequence::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Sequence Object</para></entry>
	      <entry><para>A new Sequence object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::Sequence::next">
      <title>Qore::Thread::Sequence::next()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Atomically increments the counter and returns the last value.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Sequence::next()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Sequence::next()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Sequence::next()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>The last value of the sequence.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::Sequence::getCurrent">
      <title>Qore::Thread::Sequence::getCurrent()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the current value of the counter.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Sequence::getCurrent()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Sequence::getCurrent()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Sequence::getCurrent()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>The current value of the counter.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

  </sect1>

  <sect1 id="Qore::Thread::Gate_Class">
    <title>Qore::Thread::Gate Class</title>
    <para>The Gate class implements a key-based thread lock. Any thread holding the correct key can enter the gate.  Threads that try to enter the gate with another key will block until the last thread exits the gate and the gate is open.  If you will always use the TID (thread ID) as the gate key, then you should use the <link linkend="Qore::Thread::RMutex_Class">RMutex Class</link> instead, because it's more efficient than the Gate class.</para>

    <table>
      <title>Qore::Thread::Gate Method Overview</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Method</para></entry>
	    <entry><para>Except?</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Gate::constructor">Gate::constructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Create a new Gate object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Gate::destructor">Gate::destructor()</link></para></entry>
	    <entry>N</entry>
	    <entry>Destroys the Gate object.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Gate::copy">Gate::copy()</link></para></entry>
	    <entry>N</entry>
	    <entry>Creates a new Gate object, not based on the original.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Gate::enter">Gate::enter()</link></para></entry>
	    <entry>Y</entry>
	    <entry>Acquires the lock if it is unlocked or locked with the same key, otherwise blocks until the lock counter reaches zero.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Gate::tryEnter">Gate::tryEnter()</link></para></entry>
	    <entry>Y</entry>
	    <entry>Acquires the lock if it is unlocked or locked with the same key, otherwise returns immediately with -1.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Gate::exit">Gate::exit()</link></para></entry>
	    <entry>N</entry>
	    <entry>Decrements the lock counter; if it reaches zero then the lock is unlocked and any blocked threads are awoken.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Gate::numInside">Gate::numInside()</link></para></entry>
	    <entry>N</entry>
	    <entry>Returns the current lock count.</entry>
	  </row>
	  <row>
	    <entry><para><link linkend="Qore::Thread::Gate::numWaiting">Gate::numWaiting()</link></para></entry>
	    <entry>N</entry>
	    <entry>Returns the number of threads blocked on the Gate.</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  
    <sect2 id="Qore::Thread::Gate::constructor">
      <title>Qore::Thread::Gate::constructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Gate object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>new</command> Gate()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Gate::constructor()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Gate::constructor()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Gate Object</entry>
	      <entry>The new object created.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

    </sect2>

    <sect2 id="Qore::Thread::Gate::destructor">
      <title>Qore::Thread::Gate::destructor()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Destroys the object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting><command>delete</command> <replaceable>lvalue</replaceable></programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect2>

    <sect2 id="Qore::Thread::Gate::copy">
      <title>Qore::Thread::Gate::copy()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Creates a new Gate object, not based on the original.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Gate::copy()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Gate::copy()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Gate::copy()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Gate Object</para></entry>
	      <entry><para>A new Gate object, not based on the original.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::Gate::enter">
      <title>Qore::Thread::Gate::enter()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the lock if it is unlocked or locked with the same key, otherwise blocks until the lock counter reaches zero.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Gate::enter(<replaceable>[code]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Gate::enter()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[code]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The key code to use to acquire the lock.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Gate::enter()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Gate::enter()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>GATE-ENTER-PARAMETER-EXCEPTION</para></entry>
	      <entry><para>-1 is an illegal key for this object.</para></entry>
	    </row>
´	  </tbody>
	</tgroup>
      </table>
  </sect2>

    <sect2 id="Qore::Thread::Gate::tryEnter">
      <title>Qore::Thread::Gate::tryEnter()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Acquires the lock if it is unlocked or locked with the same key, otherwise returns immediately.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Gate::tryEnter(<replaceable>[code]</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Gate::enter()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para><replaceable>[code]</replaceable></para></entry>
	      <entry><para>Integer</para></entry>
	      <entry><para>The key code to use to acquire the lock.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Gate::tryEnter()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns 0 for success (acquired the lock) or -1 for failure (would block).</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Exceptions Thrown by Gate::tryEnter()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>GATE-TRYENTER-PARAMETER-EXCEPTION</para></entry>
	      <entry><para>-1 is an illegal key for this object.</para></entry>
	    </row>
´	  </tbody>
	</tgroup>
      </table>
  </sect2>

  <sect2 id="Qore::Thread::Gate::exit">
    <title>Qore::Thread::Gate::exit()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Decrements the lock counter; if it reaches zero then the lock is unlocked and any blocked threads are awoken.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Gate::exit()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Gate::exit()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Gate::exit()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>n/a</entry>
	      <entry>This method returns no value.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
  </sect2>

  <sect2 id="Qore::Thread::Gate::numInside">
    <title>Qore::Thread::Gate::numInside()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the current lock count.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Gate::numInside()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>

      <table>
	<title>Arguments for Gate::numInside()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table>
	<title>Return Values for Gate::numInside()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns the current lock count.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

    <sect2 id="Qore::Thread::Gate::numWaiting">
      <title>Qore::Thread::Gate::numWaiting()</title>
      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Returns the number of threads blocked on this object.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>Gate::numWaiting()</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
      
      <table>
	<title>Arguments for Gate::numWaiting()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument</para></entry>
	      <entry><para>Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>n/a</para></entry>
	      <entry><para>n/a</para></entry>
	      <entry><para>This method takes no arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <table>
	<title>Return Values for Gate::numWaiting()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Integer</entry>
	      <entry>Returns the number of threads blocked on this object.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>
</chapter>
