<?xml version="1.0" encoding="UTF-8" ?>

<chapter id="Function_Library">
  <title>Function Library</title>

  <para>This section describes the built-in subroutines in the Qore language making up the system function library.</para>

  <table>
    <title>System Function Library</title>
    <tgroup cols="4" align="left" colsep="1" rowsep="1">
      <thead>
        <row>
          <entry>
            <para>Function Name</para>
          </entry>
          <entry>
            <para>Ret Type</para>
          </entry>
          <entry>
            <para>Exception</para>
          </entry>
          <entry>
            <para>Brief Description</para>
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            <para>
              <link linkend="abort">abort()</link>
            </para>
          </entry>
          <entry>
            <para>N/A</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>aborts the process</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="abs">abs()</link>
            </para>
          </entry>
          <entry>
            <para>Float or Integer</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the absolute value of the argument passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="acos">acos()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the arc cosine of the number passed in radians</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="asin">asin()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the arc sine of the number passed in radians.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="atan">atan()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the arc tangent of the number passed in radians.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="backquote">backquote()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Executes a process and returns a string of the output (stdout only)</para>
          </entry>
        </row>

        <row>
          <entry><para><link linkend="basename">basename()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a string giving the last element of a file path.</para></entry>
        </row>

        <row>
          <entry>
            <para>
              <link linkend="binary">binary()</link>
            </para>
          </entry>
          <entry>
            <para>Binary</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry><para>Returns a binary data type of the data passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="boolean">boolean()</link>
            </para>
          </entry>
          <entry>
            <para>Boolean</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Converts the argument to a boolean value</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="call_function">call_function()</link>
            </para>
          </entry>
          <entry>any</entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Calls a function and returns the return value, passing the remaining arguments after the function name to the function.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="call_function_args">call_function_args()</link>
            </para>
          </entry>
          <entry>any</entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Calls a function and returns the return value, using the argument after the function name as a list of arguments to pass to the function.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="callObjectMethod">callObjectMethod()</link>
            </para>
          </entry>
          <entry>
            <para>any</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>calls a method given by a string of the object passed, passing the remaining arguments to the method as arguments</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="callObjectMethodArgs">callObjectMethodArgs()</link>
            </para>
          </entry>
          <entry>
            <para>any</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>calls a method given by a string of the object passed, using the argument after the method name as the list of arguments to pass to the method</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="cbrt">cbrt()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the cube root of the number passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="ceil">ceil()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a value rounded up to the nearest 
      integer</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="chdir">chdir()</link></para></entry>
          <entry><para>Integer</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Changes the current working directory.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="chmod">chmod()</link></para></entry>
          <entry><para>Integer</para></entry>
          <entry><para>Y</para></entry>
          <entry><para>Changes the mode of a file.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="chr">chr()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a string containing a single ASCII character represented by the numeric value passed.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="clock_getmicros">clock_getmicros()</link>
            </para>
          </entry>
          <entry>
            <para>Integer</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the system time in microseconds (1/1000000 second intervals since Jan 1, 1970 00:00).</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="clock_getmillis">clock_getmillis()</link>
            </para>
          </entry>
          <entry>
            <para>Integer</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the system time in milliseconds (1/1000 second intervals since Jan 1, 1970 00:00).</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="clock_getnanos">clock_getnanos()</link>
            </para>
          </entry>
          <entry>
            <para>Integer</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the system time in nanoseconds (1/1000000000 second intervals since Jan 1, 1970 00:00).</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="convert_encoding">convert_encoding()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Performs explicit string character encoding conversions.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="cos">cos()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the cosine of the number in radians passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="cosh">cosh()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the hyperbolic cosine of the number passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="date">date()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Converts the argument passed to a date.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="days">days()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a relative date in days for date arithmetic.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="delete_all_thread_data">delete_all_thread_data()</link>
            </para>
          </entry>
          <entry>
            <para>n/a</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Deletes all keys in the thread-local data hash.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="delete_thread_data">delete_thread_data()</link>
            </para>
          </entry>
          <entry>
            <para>n/a</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Deletes the data associated to one or more keys in the thread-local data hash.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="errno">errno()</link></para></entry>
          <entry><para>Integer</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the value of the system &quot;errno&quot; variable, holding the last error code generated by a system call</para></entry>
        </row>
        <row>
          <entry><para><link linkend="exec">exec()</link></para></entry>
          <entry><para>n/a</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Replaces the current process image with another.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="existsFunction">existsFunction()</link>
            </para>
          </entry>
          <entry>
            <para>Boolean</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns True if the function exists in the current program's function name space.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="exit">exit()</link>
            </para>
          </entry>
          <entry>
            <para>N/A</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Exits the program</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="exp">exp()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the value of e raised to the power of the argument passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="exp2">exp2()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the value of 2 raised to the power of the argument passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="expm1">expm1()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns an equivalent of exp(x) - 1</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="f_printf">f_printf()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>&quot;field&quot; printf, field width specifiers are respected. Returns string printed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="f_sprintf">f_sprintf()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>&quot;field&quot; sprintf(), field width specifiers are 
      respected</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="float">float()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the argument converted to a floating-point 
      number</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="floor">floor()</link>
            </para>
          </entry>
          <entry><para>Float</para>
          </entry>
          <entry><para>N</para>
          </entry>
          <entry>
            <para>Returns a value rounded down to the nearest integer</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="fork">fork()</link>
            </para>
          </entry>
          <entry><para>Integer</para></entry>
          <entry><para>N</para></entry>
          <entry>
            <para>Creates a duplicate of the current process</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="format_date">format_date()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>N</entry>
          <entry>
            <para>Allows dates to be formatted</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="format_number">format_number()</link>
            </para>
          </entry>
          <entry>String</entry>
          <entry>N</entry>
          <entry>
            <para>Allows numbers to be formatted with more options than sprintf()</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="functionType">functionType()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns &quot;builtin&quot;, &quot;user&quot;, or NOTHING according to the function name passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="get_all_thread_data">get_all_thread_data()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the entire thread data hash.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="get_default_encoding">get_default_encoding()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the name of the default character set encoding.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="get_encoding">get_encoding()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a string describing the character encoding of the string passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="get_thread_data">get_thread_data()</link>
            </para>
          </entry>
          <entry>
            <para>Any</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the value of the thread-local data attached to the key passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getAllThreadCallStacks">getAllThreadCallStacks()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a hash of call stacks keyed by each TID (thread ID).</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="getClassName">getClassName()</link></para></entry>
          <entry><para>String</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the class name of the object passed.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="getDBIDriverCapabilities">getDBIDriverCapabilities()</link></para></entry>
          <entry><para>Integer</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns an integer representing the capabilities of a DBI driver.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="getDBIDriverCapabilityList">getDBIDriverCapabilityList()</link></para></entry>
          <entry><para>List</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a list of codes representing the capabilities of a DBI driver.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="getDBIDriverList">getDBIDriverList()</link></para></entry>
          <entry><para>List</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a list of strings of DBI drivers currently available.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getegid">getegid()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Retuns the effective group ID of the current process.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="geteuid">geteuid()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the effective user ID of the current process.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getFeatureList">getFeatureList()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of strings of the builtin and module-supplied features of Qore.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getenv">getenv()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Retrieves the value of an environment 
    variable</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getgid">getgid()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the real group ID of the current process.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="gethostname">gethostname()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>N</entry>
          <entry>
            <para>Returns the hostname of the system</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getMethodList">getMethodList()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of strings of the names of the methods of the class of the object passed as a parameter.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getModuleList">getModuleList()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of hashes describing the currently-loaded Qore modules.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getpid">getpid()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Retuns the PID (process ID) of the current process.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getppid">getppid()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the parent PID of the current process.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getpwuid">getpwuid()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a hash representing the user information of the user ID passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="gettid">gettid()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the Qore thread ID (TID) of the current thread.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="getuid">getuid()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the real user ID of the current process.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="glob">glob()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of files matching the string argument</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="gmtime">gmtime()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>N</entry>
          <entry>
            <para>Returns a date value in GMT based on the value of the 
      argument passed, which must be the number of seconds after Jan 1, 1970, 
      00:00:00</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="hash">hash()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns an empty hash.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="hash_values">hash_values()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of all the values in the hash argument passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="hours">hours()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a relative date in hours to be used in date arithmetic.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="html_decode">html_decode()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Returns a string with any HTML escape codes translated to the original characters</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="html_encode">html_encode()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Returns a string with any characters that can be escaped translated to HTML escape codes.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="hypot">hypot()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the length of the hypotenuse of a right-angle triangle with sides given as the two arguments.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="index">index()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Retuns the position of a substring within a string</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="int">int()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the argument converted to an integer</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="join">join()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Creates a string from a list and separator character</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="kill">kill()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Sends a signal to a process (default: SIGHUP)</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="length">length()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the length in characters for the string passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="list">list()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list with the argument passed as the first element (or an empty list if no argument is passed)</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="localtime">localtime()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a date value in localtime based on the value of 
      the argument passed, which must be the number of seconds after Jan 1, 
      1970, 00:00:00</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="log10">log10()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the base 10 logarithm of the value passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="log1p">log1p()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the natural logarithm of the value passed plus 1</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="logb">logb()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the exponent of a number.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="lstat">lstat()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of filesystem values for the file or symbolic link passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeBase64String">makeBase64String()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a base64-encoded representation of a binary object or a string.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeFormattedXMLFragment">makeFormattedXMLFragment()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes a hash into an XML string with formatting and without an XML header.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeFormattedXMLRPCCallString">makeFormattedXMLRPCCallString()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes the arguments into an XML string for an XML-RPC call with formatting.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeFormattedXMLRPCCallStringArgs">makeFormattedXMLRPCCallStringArgs()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes the arguments into an XML string formatted for an XML-RPC call with formatting, taking a single list argument for the argument list.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeFormattedXMLRPCFaultResponseString">makeFormattedXMLRPCFaultResponseString()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes the arguments into an XML string formatted for an XML-RPC fault response with whitespace formatting.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeFormattedXMLRPCResponseString">makeFormattedXMLRPCResponseString()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes the arguments into an XML string formatted for an XML-RPC response with whitespace formatting.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeFormattedXMLRPCValueString">makeFormattedXMLRPCValueString()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes the arguments into an XML string in XML-RPC Value format with whitespace formatting.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeFormattedXMLString">makeFormattedXMLString()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes a hash into an XML string with formatting and an XML header.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeXMLFragment">makeXMLFragment()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes a hash into an XML string without an XML header or formatting.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeXMLRPCCallString">makeXMLRPCCallString()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes the arguments into an XML string formatted for an XML-RPC call without formatting.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeXMLRPCCallStringArgs">makeXMLRPCCallStringArgs()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes the arguments into an XML string formatted for an XML-RPC call without formatting, taking a single list argument for the argument list.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeXMLRPCFaultResponseString">makeXMLRPCFaultResponseString()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes the arguments into an XML string formatted for an XML-RPC fault response without formatting.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeXMLRPCResponseString">makeXMLRPCResponseString()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes the arguments into an XML string formatted for an XML-RPC response without formatting.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeXMLRPCValueString">makeXMLRPCValueString()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes the arguments into an XML string in XML-RPC Value format without formatting.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="makeXMLString">makeXMLString()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Serializes a hash into a complete XML string with an XML header and without formatting.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="milliseconds">milliseconds()</link></para></entry>
	  <entry><para>Date</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a relative date in milliseconds to be used in date arithmetic.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="minutes">minutes()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a relative date in minutes to be used in date arithmetic.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="mkdir">mkdir()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Creates a directory.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="mkfifo">mkfifo()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Creates a named pipe</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="mktime">mktime()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>N</entry>
          <entry>
            <para>Returns the number of seconds after Jan 1, 1970, 00:00:00, assuming that the date passed is in local time</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="months">months()</link></para></entry>
	  <entry><para>Date</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a relative date in months to be used in date arithmetic.</para></entry>
        </row>
        <row>
          <entry><para><link linkend="nlog">nlog()</link></para></entry>
          <entry><para>Float</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns the natural logarithm of the value passed</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="now">now()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns current date and time</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="num_threads">num_threads()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the current number of threads in the process</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="ord">ord()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Gives the numeric value of the character passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="parse">parse()</link>
            </para>
          </entry>
          <entry><para>n/a</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Adds the text passed to the current program's code</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="parseBase64String">parseBase64String()</link>
            </para>
          </entry>
          <entry>
            <para>Binary</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Parses a base64 encoded string and returns the binary object</para>
          </entry>
        </row>

        <row>
          <entry><para><link linkend="parseDatasource">parseDatasource()</link></para></entry>
          <entry><para>Hash</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a hash of the components of a datasource string.</para></entry>
        </row>

        <row>
          <entry>
            <para>
              <link linkend="parseURL">parseURL()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>Parses a URL string and returns a hash of the components.</entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="parseXML">parseXML()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>parses an XML string and returns a Qore hash structure.</entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="parseXMLRPCCall">parseXMLRPCCall()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>deserializies an XML-RPC call string, returning a Qore data structure representing the call information.</entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="parseXMLRPCResponse">parseXMLRPCResponse()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>deserializies an XML-RPC response string, returning a Qore data structure representing the response information.</entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="parseXMLRPCValue">parseXMLRPCValue()</link>
            </para>
          </entry>
          <entry>
            <para>Hash</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>deserializies an XML-RPC value tree, returning a Qore data structure representing the information.</entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="pow">pow()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>returns the value of the first argument raised to the power of the second</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="print">print()</link>
            </para>
          </entry>
          <entry>
            <para>-</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Prints the string passed without any formatting.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="printf">printf()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Prints a formatted string and returns string printed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="rand">rand()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a random integer number.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="regex">regex()</link>
            </para>
          </entry>
          <entry>
            <para>Boolean</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Returns true if the regular expression matches the string passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="replace">replace()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Replaces all occurrances of a substring in a string with another string.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="rindex">rindex()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the starting position of a string in another string as searched from the end of the string</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="rmdir">rmdir()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Removes a directory.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="save_thread_data">save_thread_data()</link>
            </para>
          </entry>
          <entry>
            <para>-</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Saves the data passed against the key passed in thread-local storage.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="seconds">seconds()</link></para></entry>
	  <entry><para>Date</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Returns a relative date in seconds to be used in date arithmetic.</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="setenv">setenv()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Sets the value of an environment variable</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="sleep">sleep()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Causes the current thread to sleep for a certain number of seconds.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="sort">sort()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Sorts a list in ascending order</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="sortDescending">sortDescending()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Sorts a list in descending order</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="split">split()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Splits a string into a list of components based on a separator string</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="sprintf">sprintf()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Creates a string from the format argument passed and the other arguments.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="sin">sin()</link>
            </para>
          </entry>
          <entry><para>Float</para></entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the sine of the number in radians passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="sinh">sinh()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the hyperbolic sine of the number passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="sqrt">sqrt()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the square root of the number passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="srand">srand()</link>
            </para>
          </entry>
          <entry>
            <para>n/a</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Seeds the random number generator with the integer passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="stat">stat()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of filesystem information for the filename passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="strerror">strerror()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the description of the error number passed</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="string">string()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the argument converted to a string</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="strlen">strlen()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the number of characters in a string</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="substr">substr()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a substring of a string</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="system">system()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Executes a process and returns the return code</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="tan">tan()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the tangent of the number in radians passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="tanh">tanh()</link>
            </para>
          </entry>
          <entry>
            <para>Float</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>returns the hyperbolic tangent of the number passed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="thread_list">thread_list()</link>
            </para>
          </entry>
          <entry>
            <para>List</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a list of all current thread IDs</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="timegm">timegm()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the number of seconds since January 1, 1970 00:00 for a given date in GMT.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="tolower">tolower()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Converts a string to all lowercase</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="toupper">toupper()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Converts a string to all uppercase</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="type">type()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns the data type of the argument passed (see <link linkend="Qore_Type_Constants">Qore::Type_Constants</link>)</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="typename">typename()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>deprecated: use <link linkend="type">type()</link> instead</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="umask">umask()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Sets the file creation mask for the process</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="unlink">unlink()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Deletes a file and returns 0 for success.</para>
          </entry>
        </row>
        <row>
          <entry><para><link linkend="unsetenv">unsetenv()</link></para></entry>
          <entry><para>n/a</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Unsets an environment variable</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="usleep">usleep()</link>
            </para>
          </entry>
          <entry><para>Int</para></entry>
          <entry><para>N</para></entry>
          <entry><para>Causes the current thread to sleep for a certain number of microseconds</para></entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="vprintf">vprintf()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Outputs a formatted string based on a variable number of arguments given in a list after the format string.  Returns the string printed.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="vsprintf">vsprintf()</link>
            </para>
          </entry>
          <entry>
            <para>String</para>
          </entry>
          <entry>
            <para>Y</para>
          </entry>
          <entry>
            <para>Formats a string based on a variable number of arguments given in a list after the format string and returns this formatted string.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="wstrlen">wstrlen()</link>
            </para>
          </entry>
          <entry>
            <para>Int</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>deprecated: use <link linkend="strlen">strlen()</link> instead.</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>
              <link linkend="years">years()</link>
            </para>
          </entry>
          <entry>
            <para>Date</para>
          </entry>
          <entry>
            <para>N</para>
          </entry>
          <entry>
            <para>Returns a relative date in years to be used in date arithmetic.</para>
          </entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <sect1 id="Math_Functions">
    <title>Math Functions</title>

    <sect2 id="abs">
      <title>abs()</title>

	  <variablelist>
	    <varlistentry>
	      <term>Synopsis</term>
	      <listitem>
			<para>Returns the absolute value of the argument passed.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Usage</term>
	      <listitem>
		<programlisting>abs(<replaceable>numeric_expression</replaceable>)</programlisting>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	
	  <table>
	    <title>Arguments and Return Values for abs()</title>
	    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	      <thead>
		<row>
		  <entry><para>Argument Type</para></entry>
		  <entry><para>Return Type</para></entry>
		  <entry><para>Description</para></entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry><para>Integer</para></entry>
		  <entry><para>Integer</para></entry>
		  <entry><para>Absolute value of the integer passed.</para></entry>
		</row>
		<row>
		  <entry><para>Float</para></entry>
		  <entry><para>Float</para></entry>
		  <entry><para>Absolute value of the floating-point value passed.</para></entry>
		</row>
	      </tbody>
	    </tgroup>
	  </table>
	
	  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="acos">
  <title>acos()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>returns the arc cosine of the number passed in radians</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>acos(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for acos()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the arc cosine of the number passed in radians.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="asin">
<title>asin()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>returns the arc sine of the number passed in radians</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>asin(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for asin()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the arc sine of the number passed in radians.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="atan">
<title>atan()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>returns the arc tangent of the number passed in radians</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>atan(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for atan()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the arc tangent of the number passed in radians.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="cbrt">
  <title>cbrt()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the cube root of the number passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>cbrt(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  
  <table>
    <title>Arguments and Return Values for cbrt()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Float</para></entry>
	  <entry><para>Float</para></entry>
	  <entry><para>Returns the cube root of the number passed.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="ceil">
<title>ceil()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a floating-point number equal to the smallest integral value greater than or equal to the argument passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>ceil(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  
  <table>
    <title>Arguments and Return Values for ceil()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns a value rounded up to the nearest integral floating-point value.</para></entry>
  </row>
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="cos">
<title>cos()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the cosine of the number in radians passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>cos(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for cos()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the cosine of the number in radians passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="cosh">
<title>cosh()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the hyperbolic cosine of the number in radians passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>cosh(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for cosh()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the hyperbolic cosine of the number in radians passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="exp">
<title>exp()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the value of e raised to the power of the argument passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>exp(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for exp()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the value of e raised to the power of the argument passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="exp2">
<title>exp2()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the value of 2 raised to the power of the argument passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>exp2(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for exp2()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the value of 2 raised to the power of the argument passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="expm1">
<title>expm1()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns an equivalent of exp(x) - 1.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>expm1(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for exp()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns an equivalent of exp(x) - 1.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="floor">
      <title>floor()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a floating-point value rounded down to the integral value.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>floor(<replaceable>float</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for floor()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Float</para></entry>
              <entry><para>Float</para></entry>
              <entry><para>Returns a float-point value rounded down to the integral value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

<sect2 id="format_number">
<title>format_number()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string of a formatted number according to the arguments passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>format_number(<replaceable>format_string, number</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Description</term>
      <listitem>
	<para>The <replaceable>format_string</replaceable> has the following format: &lt;<replaceable>thousands_seperator</replaceable>&gt;[&lt;<replaceable>decimal_separator</replaceable>&gt;&lt;<replaceable>decimals</replaceable>&gt;], where <replaceable>thousands_separator</replaceable> and <replaceable>decimal_seperator</replaceable> are single ASCII characters defining the thousands and decimal separator characters respectively, and <replaceable>decimals</replaceable> is a single digit defining how may decimals should appear after the decimal point.</para>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for format_number()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Types</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String, Float</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Returns a string corresponding to a number according to the formatting string passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="hypot">
<title>hypot()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the length of the hypotenuse of a right-angle triangle with sides given as the two arguments.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>hypot(<replaceable>float_x, float_y</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for hypot()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the length of the hypotenuse of a right-angle triangle with sides given as the two arguments.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="log10">
<title>log10()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the base 10 logarithm of the value passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>log10(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  
  <table>
    <title>Arguments and Return Values for log10()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Float</para></entry>
	  <entry><para>Float</para></entry>
	  <entry><para>Returns the base 10 logarithm of the value passed.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="log1p">
<title>log1p()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the natural logarithm of the value passed plus 1.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>log1p(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  
  <table>
    <title>Arguments and Return Values for log1p()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Float</para></entry>
	  <entry><para>Float</para></entry>
	  <entry><para>Returns the natural logarithm of the value passed plus 1.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="logb">
<title>logb()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the exponent of a number.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>logb(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for logb()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the exponent of a number.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="nlog">
  <title>nlog()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the natural logarithm of the value passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>nlog(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for nlog()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the natural logarithm of the value passed.</para></entry>
  </row>

  <para>This function does not throw any exceptions.</para>
  
</tbody>
</tgroup>
</table>

</sect2>

<sect2 id="pow">
  <title>pow()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a number raised to the power of another number.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>pow(<replaceable>x, y</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for pow()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Types</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns x raised to the power of y.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by pow()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>DIVISION-BY-ZERO</para></entry>
	<entry><para>pow(x, y): y must be a non-negative value.</para></entry>
      </row>
      <row>
	<entry><para>INVALID-POW-ARGUMENTS</para></entry>
	<entry><para>pow(x, y): x cannot be negative when y is not an integer value.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>
</sect2>

<sect2 id="sin">
<title>sin()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the sine of the number in radians passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>sin(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for sin()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the sine of the number in radians passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="sinh">
<title>sinh()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the hyperbolic sine of the number in radians passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>sinh(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for sinh()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the hyperbolic sine of the number in radians passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="sqrt">
<title>sqrt()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the square root of the number passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>sqrt(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for sqrt()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>returns the square root of the number passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="tan">
<title>tan()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the tangent of the number in radians passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>tan(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for tan()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the tangent of the number in radians passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="tanh">
<title>tanh()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the hyperbolic tangent of the number in radians passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>tanh(<replaceable>float</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for tanh()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Float</para></entry>
    <entry><para>Float</para></entry>
    <entry><para>Returns the hyperbolic tangent of the number in radians passed.</para></entry>
  </row>
  
</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>
</sect2>

</sect1>
<sect1 id="Output_Functions">
  <title>Output Functions</title>

  <para>The functions in this section operate only on stdout.  For generic file I/O please see the <link linkend="Qore_File_Class">File class</link>.</para>

  <sect2 id="f_printf">
  <title>f_printf()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Outputs the formatting string to standard output, respecting field widths.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>f_printf(<replaceable>format_string, arguments...</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table><title>Arguments and Return Values for f_printf()</title>
  <tgroup cols='3' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>Arguments</para></entry>
	<entry><para>Return Type</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>String, [...]</para></entry>
	<entry><para>String</para></entry>
	<entry><para>Returns the string output (see <link linkend="String_Formatting">String Formatting</link> for information on the format string)</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="f_sprintf">
<title>f_sprintf()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a formatted string without doing any output, respecting field widths.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>f_sprintf(<replaceable>format_string, arguments...</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for f_sprintf()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, [args...]</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns a formatted string without doing any output, enforcing any field widths.  See <link linkend="String_Formatting">String Formatting</link> for information on the format string.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="print">
<title>print()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Outputs a string to standard output with no formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>print(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for print()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>Outputs the string to stdout with no formatting.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>
<sect2 id="printf">
<title>printf()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Outputs the string passed to standard output, using the first argument as a formatting string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>printf(<replaceable>format_string, arguments...</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for printf()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Arguments</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>String, [...]</para></entry>
              <entry><para>String</para></entry>
              <entry>
                <para>See <link linkend="String_Formatting">String Formatting</link> for information on the format string.  This is the "normal" (non-field) printf() version, so any field widths are considered as soft limits, and arguments are allowed to exceed their field widths. Only when an argument is less than the field width will it be padded to the field width specified.  Returns the string output.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="sprintf">
<title>sprintf()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a formatted string without enforcing hard field limits.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>sprintf(<replaceable>format_string, arguments...</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for sprintf()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, [args...]</para></entry>
              <entry><para>String</para></entry>
              <entry><para>See <link linkend="String_Formatting">String Formatting</link> for information on the format string.  Field widths are considered soft limits (arguments are allowed to exceed their field widths).  Only when an argument is less than the field width will it be padded to the field width specified.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="vprintf">
  <title>vprintf()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Outputs a formatted string based on a variable number of arguments given in a list after the format string and returns the string printed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>vprintf(<replaceable>format_string, arg_list</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for vprintf()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>String, [List]</para></entry>
              <entry><para>String</para></entry>
              <entry>
                <para>See <link linkend="String_Formatting">String Formatting</link> for information on the format string.  Arguments to the formatting string are supplied in the optional second argument as a list.  Field widths are considered as soft limits; arguments are allowed to exceed their field widths.  Only when an argument is less than the field width will it be padded to the field width specified.  Returns the string output.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="vsprintf">
<title>vsprintf()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Formats a string based on two arguments: a format string and a list.  Does not enforce hard field widths.  Returns this formatted string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>vsprintf(<replaceable>format_string, arg_list</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for vsprintf()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String, [List]</para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>See <link linkend="String_Formatting">String Formatting</link> for information on the format string.  Arguments to the formatting string are supplied in the optional second argument as a list.  Field widths are considered soft limits (arguments are allowed to exceed their field widths).  Only when an argument is less than the field width will it be padded to the field width specified.  Returns the formatted string.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

</sect1>

<sect1 id="Date_and_Time_Functions">
<title>Date and Time Functions</title>

<sect2 id="clock_getmicros">
<title>clock_getmicros()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the system time in microseconds (1/1000000 second intervals since Jan 1, 1970 00:00).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>clock_getmicros()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for clock_getmicros()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Returns the number of microseconds (1/1000000 second) since Jan 1, 1970 00:00.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="clock_getmillis">
<title>clock_getmillis()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the system time in milliseconds (1/1000 second intervals since Jan 1, 1970 00:00).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>clock_getmillis()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for clock_getmillis()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Returns the number of milliseconds (1/1000 second) since Jan 1, 1970 00:00.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="clock_getnanos">
<title>clock_getnanos()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the system time in nanoseconds (1/1000000000 second intervals since Jan 1, 1970 00:00).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>clock_getnanos()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for clock_getnanos()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Returns the number of nanoseconds (1/1000000000 second) since Jan 1, 1970 00:00.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="days">
      <title>days</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a relative date of a number of days for date arithmetic.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>days(<replaceable>expression</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for days()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns a relative date corresponding to the number of days passed as an argument, to be used in date arithmetic.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>This function does not throw any exceptions.</para>
    </sect2>

<sect2 id="format_date">
  <title>format_date()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a formatting string for a date argument passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>format_date(<replaceable>format_string, date_value</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for format_date()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><para>String, Date</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Formats the date value using the string as a formatting specifier.  See <link linkend="Date_Formatting">Date Formatting</link> for information about the date formatting string.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

  <table id="Date_Formatting">
    <title>Date Format Arguments</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>YY</para></entry>
	  <entry><para>last two digits of year</para></entry>
	</row>
	<row>
	  <entry><para>YYYY</para></entry>
	  <entry><para>four-digit year</para></entry>
	</row>
	<row>
	  <entry><para>M</para></entry>
	  <entry><para>non zero-padded month number (1-12)</para></entry>
	</row>
	<row>
	  <entry><para>MM</para></entry>
	  <entry><para>zero-padded two-digit month number (01-12)</para></entry>
	</row>
	<row>
	  <entry><para>Month</para></entry>
	  <entry><para>long month string (ex: January)</para></entry>
	</row>
	<row>
	  <entry><para>MONTH</para></entry>
	  <entry><para>long month string capitalized (ex:   JANUARY)</para></entry>
	</row>
	<row>
	  <entry><para>Mon</para></entry>
	  <entry><para>abbreviated month (ex: Jan)</para></entry>
	</row>
	<row>
	  <entry><para>MON</para></entry>
	  <entry><para>abbreviated month, capitalized (ex: JAN) </para></entry>
	</row>
	<row>
	  <entry><para>D</para></entry>
	  <entry><para>non zero-padded day number (1 - 31)</para></entry>
	</row>
	<row>
	  <entry><para>DD</para></entry>
	  <entry><para>zero-padded day number (01 - 31)</para></entry>
	</row>
	<row>
	  <entry><para>Day</para></entry>
	  <entry><para>long day of week string (ex: Monday)</para></entry>
	</row>
	<row>
	  <entry><para>DAY</para></entry>
	  <entry><para>long day of week string, capitalized (ex: 
	  MONDAY)</para></entry>
	</row>
	<row>
	  <entry><para>Dy</para></entry>
	  <entry><para>abbreviated day of week string (ex: Mon)</para></entry>
	</row>
	<row>
	  <entry><para>DY</para></entry>
	  <entry><para>abbreviated day of week string capitalised (ex: 
	  MON)</para></entry>
	</row>
	<row>
	  <entry><para>H</para></entry>
	  <entry><para>non zero-padded hour number (0 - 23)</para></entry>
	</row>
	<row>
	  <entry><para>HH</para></entry>
	  <entry><para>zero-padded hour number (00 - 23)</para></entry>
	</row>
	<row>
	  <entry><para>h</para></entry>
	  <entry><para>non zero-padded hour number, 12-hour clock (1 - 12) 
	  </para></entry>
	</row>
	<row>
	  <entry><para>hh</para></entry>
	  <entry><para>zero-padded hour number, 12-hour clock (01 - 12) 
	  </para></entry>
	</row>
	<row>
	  <entry><para>m</para></entry>
	  <entry><para>non zero-padded minute number (0 - 59)</para></entry>
	</row>
	<row>
	  <entry><para>mm</para></entry>
	  <entry><para>zero-padded minute number (00 - 59)</para></entry>
	</row>
	<row>
	  <entry><para>S</para></entry>
	  <entry><para>non zero-padded second number (0 - 59)</para></entry>
	</row>
	<row>
	  <entry><para>SS</para></entry>
	  <entry><para>zero-padded second number (00 - 59)</para></entry>
	</row>
	<row>
	  <entry><para>P</para></entry>
	  <entry><para>AM or PM (upper-case)</para></entry>
	</row>
	<row>
	  <entry><para>p</para></entry>
	  <entry><para>am or pm (lower-case)</para></entry>
	</row>	
      </tbody>
    </tgroup>
  </table>

  <para>All other text is output directly in the output text unchanged.</para>

</sect2>

<sect2 id="gmtime">
<title>gmtime()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the date and time in GMT corresponding to the argument passed, which must be an integer giving the number of seconds since Jan 1, 1970, 00:00:00. </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>gmtime(<replaceable>int_value</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for gmtime()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>The integer argument must be the number of seconds passed since Jan 1, 1970, 00:00:00 (see <link linkend="mktime">mktime()</link> for a function that returns such a value).  Qore uses the C library function gmtime() to calculate the return value, which is returned as a Qore Date type.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="hours">
      <title>hours()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a relative date in hours to be used in date arithmetic.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>hours(<replaceable>expression</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for hours()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns a relative date corresponding to the number of hours passed as an argument, to be used in date arithmetic.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

<sect2 id="localtime">
<title>localtime()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the date and time in local time corresponding to the integer argument passed, which must be the number of seconds since Jan 1, 1970, 00:00:00.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>localtime(<replaceable>int_value</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for localtime()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>The integer argument must be the number of seconds passed since Jan 1, 1970, 00:00:00 (see <link linkend="mktime">mktime()</link> for a function that returns such a value).  Qore uses the C library function localtime() to return the return value, which is returned as a Qore Date type.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="milliseconds">
      <title>milliseconds()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a relative date in milliseconds to be used in date arithmetic.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>millseconds(<replaceable>expression</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for milliseconds()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns a relative date corresponding to the number of milliseconds passed as an argument, to be used in date arithmetic.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

    <sect2 id="minutes">
      <title>minutes()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a relative date in minutes to be used in date arithmetic.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>minutes(<replaceable>expression</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for minutes()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns a relative date corresponding to the number of minutes passed as an argument, to be used in date arithmetic.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

    <sect2 id="mktime">
      <title>mktime()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the number of seconds of the date and time in local time passed since Jan 1, 1970, 00:00:00.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>mktime(<replaceable>date_value</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<para>Synopsis</para>
<para></para>

<para>Usage</para>
<para></para>

      <table>
        <title>Arguments and Return Values for mktime()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>The date argument should be in local time; the function returns the number of seconds passed since Jan 1, 1970 00:00:00 corresponding to this date.  Qore uses the C library function mktime() to return the value.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="months">
      <title>months()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a relative date in months to be used in date arithmetic.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>months(<replaceable>expression</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for months()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns a relative date corresponding to the number of months passed as an argument, to be used in date arithmetic.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>


<sect2 id="now">
<title>now()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the current date and time.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>now()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for now()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>n/a</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns the current date and time.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="seconds">
      <title>seconds()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a relative date in seconds to be used in date arithmetic.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>seconds(<replaceable>expression</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for seconds()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns a relative date corresponding to the number of seconds passed as an argument, to be used in date arithmetic.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>


<sect2 id="timegm">
<title>timegm()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the number of seconds since January 1, 1970 00:00 for a given date in GMT.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>timegm(<replaceable>date</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for timegm()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Returns the number of seconds since January 1, 1970 00:00 for a given date in GMT.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="years">
      <title>years()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a relative date in years to be used in date arithmetic.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>years(<replaceable>expression</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for years()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Date</para>
              </entry>
              <entry>
                <para>Returns a relative date corresponding to the number of years passed as an argument, to be used in date arithmetic.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>This function does not throw any exceptions.</para>
    </sect2>

</sect1>

<sect1 id="Qore_Type_Functions">
<title>Qore Type Functions</title>

<sect2 id="binary">
<title>binary()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a binary data type of the data passed, after conversion to a string if necessary.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>binary(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for binary()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>Binary</para>
              </entry>
              <entry>
                <para>A binary data type holding the string data passed.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="boolean">
<title>boolean()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts the argument to a boolean value.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>boolean(<replaceable>expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for boolean()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Any</para>
              </entry>
              <entry>
                <para>Boolean</para>
              </entry>
              <entry>
                <para>Converts the argument to an integer if necessary, where any non-zero value is True, zero is False.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="date">
<title>date()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts the argument to a date and returns the date.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>date(<replaceable>expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for date()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Any</para></entry>
              <entry><para>Date</para></entry>
              <entry><para>Converts the argument to a date and returns the date.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="float">
<title>float()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts the argument passed to a floating-point value.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>float(<replaceable>expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for float()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Any</para></entry>
              <entry><para>Float</para></entry>
              <entry><para>Converts argument passed to a floating-point value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="hash">
<title>hash()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns an empty hash (ignores any arguments passed).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>hash()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


      <table>
        <title>Arguments and Return Values for hash()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>n/a</para></entry>
              <entry><para>Hash</para></entry>
              <entry><para>Returns an empty hash, ignoring any arguments passed.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="int">
<title>int()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts the argument passed to an integer value if it is not already.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>int(<replaceable>expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for int()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Any</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Converts argument passed to an integer value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="list">
<title>list()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list; if any arguments are passed, they are inserted as the first element in the list returned.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>list([<replaceable>expression</replaceable>])</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for list()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>[Any ...]</para></entry>
              <entry><para>List</para></entry>
              <entry><para>Returns a list.  If any arguments are passed, they are inserted as the first element in the list returned.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="string">
<title>string()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts the argument passed to a string value.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>string(<replaceable>expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for string()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Any</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Converts the argument passed to a string value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="type">
  <title>type()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the data type of the argument passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>type(<replaceable>expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for type()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Any</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns the data type of the argument passed.  See <link linkend="Qore_Type_Constants">Qore::Type_Constants</link> for the values that can be returned by this function.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="typename">
<title>typename()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>deprecated: use <link linkend="type">type()</link> instead.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>typename(<replaceable>expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for typename()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Any</para></entry>
              <entry><para>String</para></entry>
              <entry><para>deprecated: use <link linkend="type">type()</link> instead.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

  <note><para>This function will be removed in a future version of Qore.</para></note>

</sect2>

</sect1>
<sect1 id="Environment_Functions">
<title>Environment Functions</title>

<sect2 id="getenv">
<title>getenv()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Retrieves the environment variable passed as an argument.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getenv(<replaceable>variable_name</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for getenv()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>String</para></entry>
              <entry><para>The contents of the environment variable, if the environment variable exists, otherwise returns no value.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="setenv">
<title>setenv()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Sets an environment variable to a value.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>setenv(<replaceable>key_string, value_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for setenv()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String</para></entry>
              <entry><para>n/a</para></entry>
              <entry><para>Sets the environment variable to a string value (the value is converted to a string if necessary).</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="unsetenv">
<title>unsetenv()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Unsets an environment variable.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>unsetenv(<replaceable>key_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for unsetenv()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>n/a</para></entry>
              <entry><para>Unsets the environment variable given by the string passed.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

  <note><para>This function is only supported on systems where the C library support for unsetenv() is present.</para></note>

</sect2>

</sect1>

<sect1 id="String_Functions">
<title>String Functions</title>

<sect2 id="chr">
<title>chr()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string containing a single ASCII character represented by the numeric value passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>chr(<replaceable>integer</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for chr()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Integer</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns a string containing a single ASCII character represented by the numeric value passed.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="convert_encoding">
<title>convert_encoding()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Performs explicit string character encoding conversions.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>convert_encoding(<replaceable>string, new_encoding</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for convert_encoding()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Converts the string arguement to the encoding given and returns the new string.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <table><title>Exceptions Thrown by convert_encoding()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>STRING-ENCODING-CONVERSION-ERROR</para></entry>
	<entry><para>There was an error converting to the target encoding (ex: conversion not supported, illegal character sequence, etc).</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="get_encoding">
<title>get_encoding()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string describing the character encoding of the string passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>get_encoding(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for get_encoding()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns a string describing the character encoding of the string passed (ex: &quot;UTF-8&quot;, &quot;ISO-8850-1&quot;, &quot;KOI8-R&quot;).</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="index">
<title>index()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Retrieves the position of a substring within a string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>index(<replaceable>string, substring [, start_position]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for index()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String, [Integer]</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>If the substring is found, returns the position of the substring within the string (starting at 0). If not found, returns -1.  If an offset position is given, the search starts at the offset position.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="join">
  <title>join()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Creates a string from a list and separator string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>join(<replaceable>separator_string, list</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for join()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, List</para></entry>
	  <entry><para>Srring</para></entry>
	  <entry><para>Returns a string with each element of the list separated by the separator string.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="length">
<title>length()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the length in characters for the string passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>length(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for length()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Returns the length in characters for the string passed.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

  <note><para>This function only works properly where a character = 1 byte.  The behaviour of length will be corrected in a future version of Qore to work properly with multi-byte character sets.  For now, use <link linkend="strlen">strlen()</link>.</para></note>

</sect2>

<sect2 id="ord">
<title>ord()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Gives the numeric value of the first character in the string passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>ord(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for ord()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Gives the numeric value of the first character in the string passed.  Only works reliably with character encodings where each character is a single byte.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="regex">
<title>regex()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns True if the regular expression matches the string passed, otherwise returns False.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>regex(<replaceable>string, pattern_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for regex()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String</para></entry>
              <entry><para>Boolean</para></entry>
              <entry><para>Returns True if <replaceable>string</replaceable> matches <replaceable>pattern</replaceable>, False if not.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <table><title>Exceptions Thrown by regex()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>REGEX-COMPILATION-ERROR</para></entry>
	<entry><para>There was an error compiling the regular expression.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="replace">
<title>replace()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Replaces all occurrances of a substring in a string with another string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>replace(<replaceable>string, substring, new_substring</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for replace()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String, String</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Replaces all occurrances of a substring in a string with another string and returns the new string.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="rindex">
<title>rindex()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the starting position of a string in another, starting from the end of the string (-1 if not found).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>rindex(<replaceable>string, substring, [position]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for rindex()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String, [Integer]</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Returns the starting position of a string in another, starting from the end of the string, or from <replaceable>position</replaceable> if given.  Returns -1 if the substring cannot be found.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="split">
<title>split()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Splits a string into a list of components based on a separator string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>split(<replaceable>pattern, string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for split()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, String</para></entry>
              <entry><para>List</para></entry>
              <entry><para>Returns a list of each component of a string separated by a separator string, with the separator removed.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="strlen">
<title>strlen()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the length in bytes of the string argument.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>strlen(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for strlen()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Returns the length of the string passed. If the argument is not a string, then it is converted to a string.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>
<sect2 id="substr">
<title>substr()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a portion of a string starting from an integer offset, with an optional length.  Arguments can be negative, giving offsets from the end of the string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>substr(<replaceable>string, offset, [length]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for substr()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String, Integer, [Integer]</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Returns the substring according to the arguments.  If <replaceable>integer_offset</replaceable> is negative, it designates an offset from the end of the string.  If <replaceable>integer_length</replaceable> is not present, all characters from the offset will be copied to the substring.  If it is negative, the rest of the string without the trailing number characters given by the negative argument will be copied to the substring.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>
<sect2 id="tolower">
<title>tolower()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts the argument passed to a string value all in lower case.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>tolower(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for tolower()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>String</para></entry>
              <entry><para>Converts argument passed to a string value, all in lower case.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>


  <para>This function does not throw any exceptions.</para>

</sect2>
<sect2 id="toupper">
<title>toupper()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Converts the argument passed to a string value all in upper case.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>toupper(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for toupper()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Any</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Converts argument passed to a string value, all in upper case.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="wstrlen">
<title>wstrlen()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>deprecated: use <link linkend="strlen">strlen()</link> instead.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>wstrlen(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for wstrlen()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>deprecated: use <link linkend="strlen">strlen()</link> instead.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

  <note><para>This function will be removed in a future version of Qore.</para></note>

</sect2>

</sect1>

<sect1 id="Operating_System_Functions">
<title>Operating System Functions</title>

<sect2 id="abort">
<title>abort()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Aborts the current program (this function does not return).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>abort()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="basename">
<title>basename()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string giving the last element of a file path.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>basename(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for basename()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Returns the last element in a file path (meant to be the filename).</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="chdir">
  <title>chdir()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Changes the current working directory.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>chdir(<replaceable>directory_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for chdir()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Changes the current working directory.  Returns 0 if successful.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by chdir()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>CHDIR-PARAMETER-ERROR</para></entry>
	<entry><para>The string for the new directory was missing from the call.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="chmod">
  <title>chmod()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Changes the mode of a file.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>chmod(<replaceable>filename, mode</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for chmod()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
  </thead>

<tbody>
  <row>
    <entry><para>String, Integer</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Sets the mode of the given file to the integer passed.  Returns 0 if successful.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by chmod()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>CHMOD-PARAMETER-ERROR</para></entry>
	<entry><para>Either the filename or the mode was missing from the call.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="errno">
<title>errno()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the error code of the last error that occurred in the current thread.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>errno()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for errno()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      
      <tbody>
	<row>
	  <entry><para>n/a</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>The error code of the most recent error in the current thread is returned.</para></entry>
	</row>
	
      </tbody>
    </tgroup>
  </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="exec">
      <title>exec()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Replaces the current process image with another.  This function does not return.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>exit(<replaceable>exec_string</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
  
      <table>
	<title>Arguments and Return Values for exec()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument Type</para></entry>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>String</para></entry>
	      <entry><para>N/A</para></entry>
	      <entry><para>The process and any arguments to the process to execute.  This function does not return.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <para>This function does not throw any exceptions.</para>

    </sect2>

    <sect2 id="exit">
      <title>exit()</title>

      <variablelist>
	<varlistentry>
	  <term>Synopsis</term>
	  <listitem>
	    <para>Exits the program with the return code passed (this function does not return).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Usage</term>
	  <listitem>
	    <programlisting>exit(<replaceable>return_code</replaceable>)</programlisting>
	  </listitem>
	</varlistentry>
      </variablelist>
  
      <table>
	<title>Arguments and Return Values for exit()</title>
	<tgroup cols='3' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>Argument Type</para></entry>
	      <entry><para>Return Type</para></entry>
	      <entry><para>Description</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>Integer</para></entry>
	      <entry><para>N/A</para></entry>
	      <entry><para>Exits the program with the return code set to the value of the argument passed converted to an integer if necessary.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
      
      <para>This function does not throw any exceptions.</para>

    </sect2>

<sect2 id="fork">
<title>fork()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Creates a copy of the current process with a new PID.  Only the current thread will be running in the child.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>fork()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for fork()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>The child's PID is returned in the parent process, 0 is returned in the child's process.  If -1 is returned, then no child was started and the error number can be retrieved with the errno() function.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="getegid">
<title>getegid()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Retuns the effective group ID of the current process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getegid()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for getegid()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Retuns the effective group ID of the current process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="geteuid">
<title>geteuid()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the effective user ID of the current process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>geteuid()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for geteuid()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Returns the effective user ID of the current process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <para>This function does not throw any exceptions.</para>

</sect2>
<sect2 id="getgid">
<title>getgid()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the real group ID of the current process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getgid()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for getgid()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Returns the real group ID of the current process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="gethostname">
<title>gethostname()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the hostname of the system.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>gethostname()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for gethostname()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Returns the hostname of the system.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="getpid">
<title>getpid()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Retuns the PID (process ID) of the current process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getpid()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for getpid()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Retuns the PID (process ID) of the current process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="getppid">
<title>getppid()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Retuns the PID (process ID) of the parent process of the current process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getppid()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for getppid()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Retuns the PID (process ID) of the parent of the current process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="getuid">
<title>getuid()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the real user ID of the current process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getuid()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for getuid()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Returns the real user ID of the current process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="glob">
<title>glob()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list of files matching the string argument.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>glob(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for glob()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>List</para></entry>
    <entry><para>Returns a list of files matching the string argument.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="kill">
  <title>kill()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Sends a signal to a process, if no signal number is given, then SIGHUP is sent by default.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>kill(<replaceable>integer_pid, [integer_signal]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for kill()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Integer, [Integer]</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>Sends a signal to a process, if the optional signal number is not given, then SIGHUP is sent.  A 0 return value means that the signal was succesfully sent.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="lstat">
<title>lstat()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list of filesystem values for the file or symbolic link passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>lstat(<replaceable>pathname</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for lstat()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>List</para></entry>
	  <entry><para>Returns a list of filesystem values for the file passed.  Does not follow symbolic links, but rather returns filesystem information for symbolic links.  See also <link linkend="stat">stat()</link>.  See <link linkend="Stat_List">Stat List</link> for a description of the list returned by this function.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="mkdir">
<title>mkdir()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Creates a directory, optionally specifying the mode.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>mkdir(<replaceable>string_name, [mode]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for mkdir()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [Integer]</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>Creates a directory with the specified name.  If the mode parameter is not sent, then 0777 is used by default (which is AND'ed with the umask).  Returns 0 if no error occurred.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <table><title>Exceptions Thrown by mkdir()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>MKDIR-PARAMETER-ERROR</para></entry>
	<entry><para>Missing directory name for the mkdir() call.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="mkfifo">
  <title>mkfifo()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Creates a named pipe file with an optional file mode (default = 0600).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>mkfifo(<replaceable>filename, [mode]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for mkfifo()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>String, [Integer]</para>
              </entry>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Creates a named pipe with the supplied path and optional mode.  If <replaceable>mode</replaceable> is not supplied, then 0660 is used by default.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>


<sect2 id="rmdir">
<title>rmdir()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Removes a directory.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>rmdir(<replaceable>path</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for rmdir()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Removes an empty directory.  Returns 0 if no error occurred.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by rmdir()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>RMDIR-PARAMETER-ERROR</para></entry>
	<entry><para>Missing directory name for the rmdir() call.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="sleep">
<title>sleep()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Causes the current thread to sleep for a certain number of seconds.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>sleep(<replaceable>integer_seconds</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for sleep()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Integer</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Causes the current thread to sleep for a number of seconds equal to the argument passed.  Returns 0 for success.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>


<sect2 id="stat">
<title>stat()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list of filesystem values for the file passed, following any symbolic links.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>stat(<replaceable>pathname</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for stat()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>List</para></entry>
	  <entry><para>Returns a list of filesystem values for the file passed, following symbolic links.  See also <link linkend="lstat">lstat()</link>.  See <link linkend="Stat_List">Stat List</link> below for a description of the list returned by this function.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>

  <table id="Stat_List">
    <title>Stat List Description</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Position</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>0</para></entry>
	  <entry><para>device inode number the file is on</para></entry>
	</row>
	<row>
	  <entry><para>1</para></entry>
	  <entry><para>inode of the file</para></entry>
	</row>
	<row>
	  <entry><para>2</para></entry>
	  <entry><para>inode protection mode</para></entry>
	</row>
	<row>
	  <entry><para>3</para></entry>
	  <entry><para>number of hard links to this file</para></entry>
	</row>
	<row>
	  <entry><para>4</para></entry>
	  <entry><para>user ID of the owner</para></entry>
	</row>
	<row>
	  <entry><para>5</para></entry>
	  <entry><para>group ID of the owner</para></entry>
	</row>
	<row>
	  <entry><para>6</para></entry>
	  <entry><para>device type number</para></entry>
	</row>
	<row>
	  <entry><para>7</para></entry>
	  <entry><para>file size in bytes</para></entry>
	</row>
	<row>
	  <entry><para>8</para></entry>
	  <entry><para>last access time of the file</para></entry>
	</row>
	<row>
	  <entry><para>9</para></entry>
	  <entry><para>last modified time of the file</para></entry>
	</row>
	<row>
	  <entry><para>10</para></entry>
	  <entry><para>last change time of the file's inode</para></entry>
	</row>
	<row>
	  <entry><para>11</para></entry>
	  <entry><para>block size</para></entry>
	</row>
	<row>
	  <entry><para>12</para></entry>
	  <entry><para>blocks allocated for the file</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

</sect2>

<sect2 id="strerror">
<title>strerror()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the string corresponding to the error code passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>strerror(<replaceable>error_code</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for strerror()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Integer</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Returns a string corresponding to the error code passed (normally retrieved with <link linkend="errno">errno()</link>)</para></entry>
  </row>
</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="system">
<title>system()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Executes an external program and returns the exit code of the process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>system(<replaceable>shell_command</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for system()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>Integer</para></entry>
	  <entry><para>If shell meta-characters are present in the string to be executed, Qore uses the C library system() call to execute the external program, otherwise a fork() and exec() is used.  The exit code of the process is returned as an integer.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="umask">
<title>umask()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Sets the file creation mask for the process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>umask(<replaceable>mode</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


  <table>
    <title>Arguments and Return Values for umask()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Integer</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Sets the file creation mask for the process, returns 0 for success.  If no argument is passed, no action is taken, and the function returns NOTHING.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="unlink">
<title>unlink()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Deletes a file and returns 0 for success.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>unlink(<replaceable>file</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for unlink()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Deletes a file and returns 0 for success.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="usleep">
<title>usleep()</title>


  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Causes the current thread to sleep for a certain number of microseconds (1/1000000 second).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>usleep(<replaceable>file</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for usleep()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Integer</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Causes the current thread to sleep for a certain number of microseconds (1/1000000 second).  Returns 0 for success.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

</sect1>

<sect1 id="Miscellaneous_Functions">
<title>Miscellaneous Functions</title>
<para></para>

<sect2 id="backquote">
<title>backquote()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Executes a process and returns a string of the output (stdout only)</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>backquote(<replaceable>shell_command_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for backquote()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Executes the string passed as a shell command in a subprocess and returns the stdout of the process as a string.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by backquote()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>BACKQUOTE-ERROR</para></entry>
	<entry><para>An error occurred with the fork() or opening the stdout pipe.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="call_function_args">
<title>call_function_args()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Calls a function and returns the return value, using the optional second argument as a list of arguments for the function to be called.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>call_function_args(<replaceable>function_name_string, [args]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for call_function_args()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>

      <tbody>
	<row>
	  <entry><para>String, [List]</para></entry>
	  <entry><para>Any (depends on function)</para></entry>
	<entry><para>Executes the given function using any second argument as the arguments for the function to be called.</para></entry>  </row>
	
      </tbody>
    </tgroup>
  </table>

  <table><title>Exceptions Thrown by call_function_args()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>CALL-FUNCTION-ARGS-PARAMETER-ERROR</para></entry>
	<entry><para>The first argument must be a string.</para></entry>
      </row>
      <row>
	<entry><para>INVALID-FUNCTION-ACCESS</para></entry>
	<entry><para>Parse options do not allow access to the function.</para></entry>
      </row>
      <row>
	<entry><para>NO-FUNCTION</para></entry>
	<entry><para>The function does not exist.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="call_function">
<title>call_function()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Calls a function and returns the return value, passing the remaining arguments after the function name to the function.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>call_function(<replaceable>function_name_string, [args ...]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for call_function()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String, Any</para></entry>
    <entry><para>Any (depends on function)</para></entry>
    <entry><para>Executes the given function with the remainder of the arguments as the arguments to the function to be called.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by call_function()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>CALL-FUNCTION-PARAMETER-ERROR</para></entry>
	<entry><para>The first argument must be a string.</para></entry>
      </row>
      <row>
	<entry><para>INVALID-FUNCTION-ACCESS</para></entry>
	<entry><para>Parse options do not allow access to the function.</para></entry>
      </row>
      <row>
	<entry><para>NO-FUNCTION</para></entry>
	<entry><para>The function does not exist.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="callObjectMethod">
<title>callObjectMethod()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Calls a method of an object, passing the remainder of the arguments to the function as arguments to the method.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>callObjectMethod(<replaceable>object, method_string, [args ...]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for callObjectMethod()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Object, String, [args ...]</para></entry>
    <entry><para>Any (depends on method)</para></entry>
    <entry><para>Calls a method of an object, passing the remainder of the arguments to the function as arguments to the method, and returns the return value, if any.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by callObjectMethod()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>METHOD-DOES-NOT-EXIST</para></entry>
	<entry><para>The named method does not exist in this class.</para></entry>
      </row>
      <row>
	<entry><para>ILLEGAL-EXPLICIT-METHOD-CALL</para></entry>
	<entry><para>The named method may not be called explicitly.</para></entry>
      </row>
      <row>
	<entry><para>METHOD-IS-PRIVATE</para></entry>
	<entry><para>The named method is private and therefore can only be called within the class.</para></entry>
      </row>
      <row>
	<entry><para>BASE-CLASS-IS-PRIVATE</para></entry>
	<entry><para>The named method is a member of a privately inherited base class.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="callObjectMethodArgs">
  <title>callObjectMethodArgs()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Calls a method of an object, using the optional third argument as the argument list to the method.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>callObjectMethodArgs(<replaceable>object, method_string, [arg_list]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for callObjectMethodArgs()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>Object, String, [args ...]</para></entry>
    <entry><para>Any (depends on method)</para></entry>
    <entry><para>Calls a method of an object, using the optional third argument as the argument list to the method, and returns the return value, if any.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by callObjectMethodArgs()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>METHOD-DOES-NOT-EXIST</para></entry>
	<entry><para>The named method does not exist in this class.</para></entry>
      </row>
      <row>
	<entry><para>ILLEGAL-EXPLICIT-METHOD-CALL</para></entry>
	<entry><para>The named method may not be called explicitly.</para></entry>
      </row>
      <row>
	<entry><para>METHOD-IS-PRIVATE</para></entry>
	<entry><para>The named method is private and therefore can only be called within the class.</para></entry>
      </row>
      <row>
	<entry><para>BASE-CLASS-IS-PRIVATE</para></entry>
	<entry><para>The named method is a member of a privately inherited base class.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="existsFunction">
<title>existsFunction()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns True if the function exists in the current program's function name space.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>existsFunction(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for existsFunction()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>Boolean</para></entry>
    <entry><para>Returns True if the function exists in the current program's function name space, otherwise returns False.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="functionType">
<title>functionType()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns &quot;builtin&quot;, &quot;user&quot;, or NOTHING according to the function name passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>functionType(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for functionType()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>Boolean</para></entry>
    <entry><para>Returns &quot;builtin&quot; (for a builtin function), &quot;user&quot; (for a user function), or NOTHING (if the function cannot be found) according to the function name passed.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="getClassName">
  <title>getClassName()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the class name of an object.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getClassName(<replaceable>object</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

      <table>
        <title>Arguments and Return Values for getClassName()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Object</para>
              </entry>
              <entry>
                <para>String</para>
              </entry>
              <entry>
                <para>Returns the class name of the object passed.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="getDBIDriverCapabilities">
      <title>getDBIDriverCapabilities()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns an integer representing the capabilities of a DBI driver.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>getDBIDriverCapabilities(<replaceable>driver_name</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for getDBIDriverCapabilities()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>Integer</para></entry>
              <entry><para>Returns an integer representing the capabilities of a DBI driver binary-OR'ed together (see <link linkend="DBI_Capability_Constants">DBI Capability Constants</link>).  Returns NOTHING if the driver cannot be found.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

    <sect2 id="getDBIDriverCapabilityList">
      <title>getDBIDriverCapabilityList()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a list of each capability supported by the given DBI driver.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>getDBIDriverCapabilityList(<replaceable>driver_name</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for getDBIDriverCapabilityList()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>List</para></entry>
              <entry><para>Returns a list of each capability supported by the given DBI driver (see <link linkend="DBI_Capability_Constants">DBI Capability Constants</link>).  Returns NOTHING if the driver cannot be found.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

    <sect2 id="getDBIDriverList">
      <title>getDBIDriverList()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a list of strings of DBI drivers currently available.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>getDBIDriverList()</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for getDBIDriverList()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>n/a</para></entry>
              <entry><para>List</para></entry>
              <entry><para>Returns a list of strings of DBI drivers currently available.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

<sect2 id="getFeatureList">
<title>getFeatureList()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list of strings of the builtin and module-supplied features of Qore.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getFeatureList()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for getFeatureList()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>List</para></entry>
    <entry><para>Returns a list of strings of the builtin and module-supplied features of Qore.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="getMethodList">
      <title>getMethodList()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a list of strings of the names of the methods of the class of the object passed as a parameter.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>getMethodList(<replaceable>object</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for getMethodList()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>Object</para></entry>
              <entry><para>List</para></entry>
              <entry><para>Returns all methods in the class, both private and public.  Does not return inherited methods.  If no object is passed to the function, NOTHING is returned.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

<sect2 id="getModuleList">
<title>getModuleList()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list of hashes describing the currently-loaded Qore modules.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getModuleList()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for getModuleList()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>List</para></entry>
    <entry><para>Each element in the list is a hash describing currently-loaded qore modules.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="get_default_encoding">
<title>get_default_encoding()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the name of the default character set encoding.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>get_default_encoding()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for get_default_encoding()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>String</para></entry>
    <entry><para>Returns the name of the default character set encoding.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

    <sect2 id="getpwuid">
      <title>getpwuid()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a hash representing the user information for the user ID passed.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>getpwuid(<replaceable>integer_uid</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for getpwuid()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Integer</para>
              </entry>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>Returns a hash representing the user information for the user ID passed.  If the uid does not exist, NOTHING is returned.  Otherwise the hash has the following keys: pw_name, pw_passwd, pw_gecos, pw_dir, pw_shell, pw_uid, pw_gid.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

    <sect2 id="hash_values">
      <title>hash_values()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a list of all the values in the hash argument passed.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>hash_values(<replaceable>hash</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for hash_values()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>
                <para>Argument Type</para>
              </entry>
              <entry>
                <para>Return Type</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>Hash</para>
              </entry>
              <entry>
                <para>List</para>
              </entry>
              <entry>
                <para>Returns a list of all the values in the hash argument passed.  If no hash is passed, returns NOTHING.</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>This function does not throw any exceptions.</para>
    </sect2>

<sect2 id="html_decode">
<title>html_decode()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string with any HTML escape codes translated to the original characters.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>html_decode(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for html_decode()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Returns a string with any HTML escape codes (ie &amp;amp; -&gt; &amp;, etc) translated to the original characters.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="html_encode">
<title>html_encode()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a string with any characters that can be escaped translated to HTML escape codes.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>html_encode(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for html_encode()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Returns a string with characters needed HTML escape code transation (ie &amp; -&gt; &amp;amp;, etc) translated to the escape codes.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="makeBase64String">
  <title>makeBase64String()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a base64-encoded representation of a binary object or a string.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeBase64String(<replaceable>arg</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeBase64String()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Binary or String</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Returns a base64-encoded representation of a binary object or a string.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="parse">
<title>parse()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Adds the text passed to the current program's code.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parse(<replaceable>string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for parse()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>n/a</para></entry>
    <entry><para>Parses the string passed and adds the code to the current program.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by parse()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>PARSE-ERROR</para></entry>
	<entry><para>An error occurred parsing the text.</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

<sect2 id="parseBase64String">
<title>parseBase64String()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Parses a base64 encoded string and returns the binary object.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseBase64String(<replaceable>base64_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for parseBase64String()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String</para></entry>
    <entry><para>Binary</para></entry>
    <entry><para>Parses a base64 encoded string and returns the binary object.  If anything is passed other than a string as an argument, no action is taken and the function returns NOTHING.</para></entry>
  </row>

</tbody>
</tgroup>
</table>

  <table><title>Exceptions Thrown by parseBase64String()</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>err</para></entry>
	<entry><para>desc</para></entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry><para>BASE64-PARSE-ERROR</para></entry>
	<entry><para>A syntax error occurred parsing the base64 string (invalid character, etc).</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect2>

    <sect2 id="parseDatasource">
      <title>parseDatasource()</title>
      <variablelist>
        <varlistentry>
          <term>Synopsis</term>
          <listitem>
            <para>Returns a hash of the components of a datasource string.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Usage</term>
          <listitem>
            <programlisting>parseBase64String(<replaceable>datasource_string</replaceable>)</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      
      <table>
        <title>Arguments and Return Values for parseDatasource()</title>
        <tgroup cols="3" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry><para>Argument Type</para></entry>
              <entry><para>Return Type</para></entry>
              <entry><para>Description</para></entry>
            </row>
          </thead>
          <tbody>
            <row>
	      <entry><para>String</para></entry>
              <entry><para>Hash</para></entry>
              <entry><para>Returns a hash of the components of a datasource string.  A datasource string has the following structure: <code>driver:user/pass@db(charset)%host</code>, where driver, charset, and host are optional.</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <table>
	<title>Exceptions Thrown by parseDatasource()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>DATASOURCE-PARSE-ERROR</para></entry>
	      <entry><para>A syntax error occurred parsing the datasource string (missing field, unexpected character, etc).</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>

<sect2 id="parseURL">
  <title>parseURL()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Parses a URL string and returns a hash of the components.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseURL(<replaceable>url_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseURL()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Parses a URL string and returns a hash of the components.  URLs have the format: <code>protocol://username:password@hostname:port/path</code>, where only the hostname is mandatory.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

<sect2 id="rand">
<title>rand()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a random integer number (uses the C library function <code>random()</code> to generate the number).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>rand()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

<table><title>Arguments and Return Values for rand()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>A random integer number is returned.  See <link linkend="srand">srand()</link> for a function to seed the random number generator.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="sort">
  <title>sort()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Sorts a list where all the elements are somple data types, in ascending order.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>sort(<replaceable>list</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  <table>
    <title>Arguments and Return Values for sort()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>List</para></entry>
	  <entry><para>List</para></entry>
	  <entry><para>Sorts the list passed in ascending order and returns the sorted list.  The list must be made up of orderable types (i.e. a list of hashes cannot be sorted).</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
</sect2>

  <sect2 id="sortDescending">
    <title>sortDescending()</title>
    <variablelist>
      <varlistentry>
	<term>Synopsis</term>
	<listitem>
	  <para>Sorts a list where all the elements are somple data types, in descending order.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>Usage</term>
	<listitem>
	  <programlisting>sortDescending(<replaceable>list</replaceable>)</programlisting>
	</listitem>
      </varlistentry>
    </variablelist>
    <table>
      <title>Arguments and Return Values for sortDescending()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>List</para></entry>
	    <entry><para>List</para></entry>
	    <entry><para>Sorts the list passed in descending order and returns the sorted list.  The list must be made up of orderable types (i.e. a list of hashes cannot be sorted).</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
    <para>This function does not throw any exceptions.</para>
  </sect2>
</sect1>

<sect2 id="srand">
  <title>srand()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Seeds the random number generator with the integer passed (uses the C library function <code>srandom()</code>).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>srand(<replaceable>integer</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for srand()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>

      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
    
      <tbody>
	<row>
	  <entry><para>Integer</para></entry>
	  <entry><para>n/a</para></entry>
	  <entry><para>Seeds the random number generator with the integer passed.  See <link linkend="rand">rand()</link> for a function to get a random number.</para></entry>
	</row>

      </tbody>
    </tgroup>
  </table>
  <para>This function does not throw any exceptions.</para>
  
</sect2>

<sect1 id="Threading_Functions">
  <title>Threading Functions</title>
  <para></para>

  <sect2 id="delete_all_thread_data">
    <title>delete_all_thread_data()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Deletes all keys in the thread-local data hash.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>delete_all_thread_data()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
    
    <table>
      <title>Arguments and Return Values for delete_all_thread_data()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>n/a</para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>Deletes all keys in the thread-local data hash.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
    <para>This function does not throw any exceptions.</para>
  </sect2>

  <sect2 id="delete_thread_data">
    <title>delete_thread_data()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Deletes the data associated to one or more keys in the thread-local data hash.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>delete_thread_data(<replaceable>key_string, [key_string, ...]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
    
    <table>
      <title>Arguments and Return Values for delete_thread_data()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Arguments</para></entry>
	    <entry><para>Return Values</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>String, [String ...]</para></entry>
	    <entry><para>n/a</para></entry>
	    <entry><para>Deletes the data associated to one or more keys in the thread-local data hash.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  <para>This function does not throw any exceptions.</para>
  </sect2>

  <sect2 id="get_all_thread_data">
    <title>get_all_thread_data()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the entire thread-local data hash.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>get_all_thread_data()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
    <table>
      <title>Arguments and Return Values for get_all_thread_data()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>n/a</para></entry>
	    <entry><para>Hash</para></entry>
	    <entry><para>Returns the entire thread-local data hash.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  <para>This function does not throw any exceptions.</para>
  </sect2>
  
  <sect2 id="getAllThreadCallStacks">
    <title>getAllThreadCallStacks()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a hash of call stacks keyed by each TID (thread ID).</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>getAllThreadCallStacks()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
    <table>
      <title>Arguments and Return Values for getAllThreadCallStacks()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>n/a</para></entry>
	    <entry><para>Hash</para></entry>
	    <entry><para>Returns a hash of call stacks keyed by each TID (thread ID).  See <link linkend="Call_Stack_Description">Call Stack Description</link> for a description of the call stack format.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  <para>This function does not throw any exceptions.</para>
  </sect2>

  <sect2 id="get_thread_data">
    <title>get_thread_data()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the value of the thread-local data attached to the key passed.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>get_thread_data(<replaceable>key_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
    
    <table>
      <title>Arguments and Return Values for get_thread_data()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>String</para></entry>
	    <entry><para>depends on key</para></entry>
	    <entry><para>Returns the value of the thread-local data attached to the key passed.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  <para>This function does not throw any exceptions.</para>
  </sect2>
  
  <sect2 id="gettid">
    <title>gettid()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the Qore thread ID (TID) of the current thread.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>gettid()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
    
    <table>
      <title>Arguments and Return Values for gettid()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	
	<tbody>
	  <row>
	    <entry><para>n/a</para></entry>
	    <entry><para>Integer</para></entry>
	    <entry><para>Returns the Qore thread ID (TID) of the current thread.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
  <para>This function does not throw any exceptions.</para>
  </sect2>

<sect2 id="num_threads">
<title>num_threads()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns the current number of threads in the process.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>num_threads()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>

  <table>
    <title>Arguments and Return Values for num_threads()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>Integer</para></entry>
    <entry><para>Returns the current number of threads in the process.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="save_thread_data">
  <title>save_thread_data()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Saves the data passed against the key passed in thread-local storage.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>save_thread_data(<replaceable>key_string, value_expression</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for save_thread_data()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>String, Any</para></entry>
    <entry><para>n/a</para></entry>
    <entry><para>Saves the data passed against the key passed in thread-local storage.</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

<sect2 id="thread_list">
  <title>thread_list()</title>

  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Returns a list of all current thread IDs.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>thread_list()</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>


<table><title>Arguments and Return Values for thread_list()</title>
<tgroup cols='3' align='left' colsep='1' rowsep='1'>

  <thead>
  <row>
    <entry><para>Argument Type</para></entry>
    <entry><para>Return Type</para></entry>
    <entry><para>Description</para></entry>
  </row>
  </thead>

<tbody>
  <row>
    <entry><para>n/a</para></entry>
    <entry><para>List</para></entry>
    <entry><para>Returns a list of all current thread IDs</para></entry>
  </row>

</tbody>
</tgroup>
</table>
  <para>This function does not throw any exceptions.</para>

</sect2>

</sect1>

<sect1 id="XML_Functions">
  <title>XML Functions</title>

  <para></para>

  <sect2 id="makeFormattedXMLFragment">
    <title>makeFormattedXMLFragment()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes a hash into an XML string with formatting without an XML header.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLFragment(<replaceable>hash, [encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
    
    <table>
      <title>Arguments and Return Values for makeFormattedXMLFragment()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>Hash, [String]</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Serializes the Qore hash to an XML string (see <link linkend="XML_Integration">XML Integration</link> for more information) without an XML header but with formatting.  The hash must have only one top-level key or an exception willbe thrown.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLFragment()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>MAKE-XML-ERROR</para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

  </sect2>

<sect2 id="makeFormattedXMLRPCCallString">
  <title>makeFormattedXMLRPCCallString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string in XML-RPC call format with whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLRPCCallString(<replaceable>method_name, [arguments ...]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLRPCCallString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [Any ...]</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC call format with whitespace formatting.  The encoding of the resulting string will always be the default encoding.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCCallString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>MAKE-XML-ERROR</para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="makeFormattedXMLRPCCallStringArgs">
  <title>makeFormattedXMLRPCCallStringArgs()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string in XML-RPC call format with whitespace formatting, taking a single argument following the XML-RPC method name for the argument list to the method.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLRPCCallStringArgs(<replaceable>method_name, [arg_list]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLCallStringArgs()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [List]</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC call format with whitespace formatting, using a single argument following the XML-RPC method name as the argument list for the method.  The encoding of the resulting string will always be the default encoding.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCCallStringArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>MAKE-XML-ERROR</para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="makeFormattedXMLRPCFaultResponseString">
  <title>makeFormattedXMLRPCFaultResponseString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string formatted for an XML-RPC fault response with whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLRPCFaultResponseString(<replaceable>error_code, error_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLRPCFaultResponseString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Integer, String</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC fault response with whitespace formatting.  The encoding of the resulting string will always be the default encoding.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCCallStringArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>MAKE-XML-ERROR</para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	    <row>
	      <entry><para>MAKE-XML-RPC-FAULT-RESPONSE-STRING-PARAMETER-ERROR</para></entry>
	      <entry><para>missing either the error code or the error string arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>


</sect2>

<sect2 id="makeFormattedXMLRPCResponseString">
  <title>makeFormattedXMLRPCResponseString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string formatted for an XML-RPC response with whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLRPCResponseString(<replaceable>any</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLRPCResponseString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Any</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC response with whitespace formatting>.  The encoding of the resulting string will always be the default encoding.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCResponseString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>MAKE-XML-ERROR</para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeFormattedXMLRPCValueString">
  <title>makeFormattedXMLRPCValueString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string in XML-RPC value format with whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLRPCValueString(<replaceable>any</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLRPCValueString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Any</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC value format with whitespace formatting.   The encoding of the resulting string will always be the default encoding.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCValueString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>MAKE-XML-ERROR</para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="makeFormattedXMLString">
  <title>makeFormattedXMLString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes a hash into an XML string with formatting and an XML header.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeFormattedXMLString(<replaceable>hash, [encoding]</replaceable>)</programlisting>
	<programlisting>makeFormattedXMLString(<replaceable>string, hash, [encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeFormattedXMLString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	  <row>
	    <entry><para>Hash, [String]</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Serializes the Qore hash to an XML string (see <link linkend="XML_Integration">XML Integration</link> for more information) with an XML header and formatting.  The hash must have only one top-level key or an exception willbe thrown.</para></entry>
	  </row>
	  <row>
	    <entry><para>String, Hash, [String]</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Serializes the Qore hash to an XML string (see <link linkend="XML_Integration">XML Integration</link> for more information) with an XML header and formatting.  The first parameter will be the top-level XML element.</para></entry>
	  </row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeFormattedXMLRPCValueString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>MAKE-XML-ERROR</para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	    <row>
	      <entry><para>MAKE-FORMATTED-XML-STRING-PARAMETER-EXCEPTION</para></entry>
	      <entry><para>Incorrect arguments passed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

  <sect2 id="makeXMLFragment">
    <title>makeXMLFragment()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes a hash into an XML string without whitespace formatting and without an XML header.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLFragment(<replaceable>hash, [encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
    
    <table>
      <title>Arguments and Return Values for makeXMLFragment()</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
	<thead>
	  <row>
	    <entry><para>Argument Type</para></entry>
	    <entry><para>Return Type</para></entry>
	    <entry><para>Description</para></entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry><para>Hash, [String]</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Serializes the Qore hash to an XML string (see <link linkend="XML_Integration">XML Integration</link> for more information) without an XML header and without whitespace formatting.  The hash must have only one top-level key or an exception willbe thrown.</para></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

      <table>
	<title>Exceptions Thrown by makeXMLFragment()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>MAKE-XML-ERROR</para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

  </sect2>

<sect2 id="makeXMLRPCCallString">
  <title>makeXMLRPCCallString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string in XML-RPC call format without whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLRPCCallString(<replaceable>method_name, [arguments ...]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLRPCCallString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [Any ...]</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC call format without whitespace formatting.  The encoding of the resulting string will always be the default encoding.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCCallString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>MAKE-XML-ERROR</para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="makeXMLRPCCallStringArgs">
  <title>makeXMLRPCCallStringArgs()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string in XML-RPC call format without whitespace formatting, taking a single argument following the XML-RPC method name for the argument list to the method.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLRPCCallStringArgs(<replaceable>method_name, [arg_list]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLCallStringArgs()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [List]</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC call format without whitespace formatting, using a single argument following the XML-RPC method name as the argument list for the method.  The encoding of the resulting string will always be the default encoding.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCCallStringArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>MAKE-XML-ERROR</para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="makeXMLRPCFaultResponseString">
  <title>makeXMLRPCFaultResponseString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string formatted for an XML-RPC fault response without whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLRPCFaultResponseString(<replaceable>error_code, error_string</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLRPCFaultResponseString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Integer, String</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC fault response without whitespace formatting.  The encoding of the resulting string will always be the default encoding.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCCallStringArgs()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>MAKE-XML-ERROR</para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	    <row>
	      <entry><para>MAKE-XML-RPC-FAULT-RESPONSE-STRING-PARAMETER-ERROR</para></entry>
	      <entry><para>missing either the error code or the error string arguments.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>


</sect2>

<sect2 id="makeXMLRPCResponseString">
  <title>makeXMLRPCResponseString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string formatted for an XML-RPC response without whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLRPCResponseString(<replaceable>any</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLRPCResponseString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Any</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string formatted for an XML-RPC response without whitespace formatting>.  The encoding of the resulting string will always be the default encoding.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCResponseString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>MAKE-XML-ERROR</para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="makeXMLRPCValueString">
  <title>makeXMLRPCValueString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes the arguments into an XML string in XML-RPC value format without whitespace formatting.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLRPCValueString(<replaceable>any</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLRPCValueString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>Any</para></entry>
	  <entry><para>String</para></entry>
	  <entry><para>Serializes the arguments into an XML string in XML-RPC value format without whitespace formatting.   The encoding of the resulting string will always be the default encoding.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCValueString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>MAKE-XML-ERROR</para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="makeXMLString">
  <title>makeXMLString()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Serializes a hash into an XML string without whitespace formatting but with an XML header.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>makeXMLString(<replaceable>hash, [encoding]</replaceable>)</programlisting>
	<programlisting>makeXMLString(<replaceable>string, hash, [encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for makeXMLString()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	  <row>
	    <entry><para>Hash, [String]</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Serializes the Qore hash to an XML string (see <link linkend="XML_Integration">XML Integration</link> for more information) with an XML header but without whitespace formatting.  The hash must have only one top-level key or an exception willbe thrown.</para></entry>
	  </row>
	  <row>
	    <entry><para>String, Hash, [String]</para></entry>
	    <entry><para>String</para></entry>
	    <entry><para>Serializes the Qore hash to an XML string (see <link linkend="XML_Integration">XML Integration</link> for more information) with an XML header but without whitespace formatting.  The first parameter will be the top-level XML element.</para></entry>
	  </row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by makeXMLRPCValueString()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>MAKE-XML-ERROR</para></entry>
	      <entry><para>An error occurred serializing the Qore data to an XML string.</para></entry>
	    </row>
	    <row>
	      <entry><para>MAKE-XML-STRING-PARAMETER-EXCEPTION</para></entry>
	      <entry><para>Incorrect arguments passed.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="parseXML">
  <title>parseXML()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Parses an XML string and returns a Qore hash structure.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseXML(<replaceable>xml_string, [output_encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseXML()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [String]</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Parses an XML string and returns a Qore hash structure.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by parseXML()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>PARSE-XML-EXCEPTION</para></entry>
	      <entry><para>Error parsing the XML string.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="parseXMLRPCCall">
  <title>parseXMLRPCCall()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Deserializies an XML-RPC call string, returning a Qore data structure representing the call information.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseXMLRPCCall(<replaceable>xmlrpc_call_string, [output_encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseXMLRPCCall()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [String]</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Deserializies an XML-RPC call string, returning a Qore data structure representing the call information.  The hash will have the following keys: methodName, params</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by parseXMLRPCCall()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>PARSE-XML-RPC-CALL-ERROR</para></entry>
	      <entry><para>Error parsing the XML-RPC call string.</para></entry>
	    </row>
	    <row>
	      <entry><para>PARSE-XML-RPC-VALUE-ERROR</para></entry>
	      <entry><para>Error parsing an XML-RPC value node.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
</sect2>

<sect2 id="parseXMLRPCResponse">
  <title>parseXMLRPCResponse()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Deserializies an XML-RPC response string, returning a Qore data structure representing the response information.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseXMLRPCResponse(<replaceable>xmlrpc_response_string, [output_encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseXMLRPCResponse()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [String]</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Deserializies an XML-RPC response string, returning a Qore data structure representing the response information.  The hash will have either a &quot;fault&quot; or a &quot;params&quot; key, depending on if it's a fault response or a non-fault response.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by parseXMLRPCResponse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>PARSE-XML-RPC-RESPONSE-ERROR</para></entry>
	      <entry><para>Error parsing the XML-RPC response string.</para></entry>
	    </row>
	    <row>
	      <entry><para>PARSE-XML-RPC-VALUE-ERROR</para></entry>
	      <entry><para>Error parsing an XML-RPC value node.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

<sect2 id="parseXMLRPCValue">
  <title>parseXMLRPCValue()</title>
  <variablelist>
    <varlistentry>
      <term>Synopsis</term>
      <listitem>
	<para>Deserializies an XML-RPC value tree, returning a Qore data structure representing the information.</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Usage</term>
      <listitem>
	<programlisting>parseXMLRPCValue(<replaceable>xmlrpc_value_string, [output_encoding]</replaceable>)</programlisting>
      </listitem>
    </varlistentry>
  </variablelist>
  
  <table>
    <title>Arguments and Return Values for parseXMLRPCValue()</title>
    <tgroup cols='3' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Argument Type</para></entry>
	  <entry><para>Return Type</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>String, [String]</para></entry>
	  <entry><para>Hash</para></entry>
	  <entry><para>Deserializies an XML-RPC value string, returning Qore data representing the value data.</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

      <table>
	<title>Exceptions Thrown by parseXMLRPCResponse()</title>
	<tgroup cols='2' align='left' colsep='1' rowsep='1'>
	  <thead>
	    <row>
	      <entry><para>err</para></entry>
	      <entry><para>desc</para></entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><para>PARSE-XML-RPC-VALUE-ERROR</para></entry>
	      <entry><para>Error parsing an XML-RPC value node.</para></entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

</sect2>

</sect1>

<sect1 id="Debug_Functions">
<title>Debug Functions</title>

<para></para>

</sect1>

<sect1 id="String_Formatting">
  <title>String Formatting</title>
  <para>This is the standard "printf" format string. </para>
  <para>There are three types of objects in the format string:</para>
  <itemizedlist mark='bullet'>
    <listitem>
      <para>Plain characters, which are copied as-is to the output string</para>
    </listitem>
    <listitem>
      <para>Escape characters, which are converted and copied to the output string</para>
    </listitem>
    <listitem>
      <para>Format specifications for arguments to be included in the output string, which are preceded by the percent sign "%" as follows:</para>
    </listitem>
  </itemizedlist>

  <para>After the "%" sign, there can be zero or more flags as follows:</para>
  <table>
    <title>After the "%" sign, there can be zero or more flags as follows:</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Flag</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>      
      <tbody>
	<row>
	  <entry><para>-</para></entry>
	  <entry><para>left-justify the field</para></entry>
	</row>
	<row>
	  <entry><para>+</para></entry>
	  <entry><para>include the sign for the number (+ or -)</para></entry>
	</row>
	<row>
	  <entry><para>0</para></entry>
	  <entry><para>use zero left padding rather than space padding</para></entry>
	</row>
	<row>
	  <entry><para>&lt;space&gt;</para></entry>
	  <entry><para>use space padding</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>
  <para>Then a field width specifier can be given as a string of digits specifying the length of the field. With "field" functions (function names preceded by "f_"), these width specifiers are hard limits; that is; arguments longer than the width specified are limited to the specified width.</para>
  <para>For floating-point arguments, a precision specifier may be given by including a period "." and another digit string, which indicates the number of digits to appear after the decimal point.</para>
  <para>Then the format character is given as follows:</para>
  <table>
    <title>Then the format character is given as follows:</title>
    <tgroup cols='2' align='left' colsep='1' rowsep='1'>
      <thead>
	<row>
	  <entry><para>Character</para></entry>
	  <entry><para>Description</para></entry>
	</row>
      </thead>
      <tbody>
	<row>
	  <entry><para>s</para></entry>
	  <entry><para>string</para></entry>
	</row>
	<row>
	  <entry><para>d</para></entry>
	  <entry><para>Integer, output in base 10 format</para></entry>
	</row>
	<row>
	  <entry><para>n</para></entry>
	  <entry><para>Any Qore value, formatted as a string, without any line breaks</para></entry>
	</row>
	<row>
	  <entry><para>N</para></entry>
	  <entry><para>Any Qore value, formatted as a string, with line breaks and whitespace formatting for complex objects</para></entry>
	</row>
	<row>
	  <entry><para>x</para></entry>
	  <entry><para>Integer, output in base 16 (hexadecimal) format with lower-case a-f</para></entry>
	</row>
	<row>
	  <entry><para>X</para></entry>
	  <entry><para>Integer, output in base 16 (hexadecimal) format with upper-case A-F</para></entry>
	</row>
      </tbody>
    </tgroup>
  </table>

  <table><title>String Escape Characters</title>
  <tgroup cols='2' align='left' colsep='1' rowsep='1'>
    <thead>
      <row>
	<entry><para>Character</para></entry>
	<entry><para>Description</para></entry>
      </row>
    </thead>
    
    <tbody>
      <row>
	<entry><para>\n</para></entry>
	<entry><para>a newline character</para></entry>
      </row>
      <row>
	<entry><para>\r</para></entry>
	<entry><para>a carriage-return character</para></entry>
      </row>
      <row>
	<entry><para>\t</para></entry>
	<entry><para>a tab character</para></entry>
      </row>
      <row>
	<entry><para>\b</para></entry>
	<entry><para>a backspace character</para></entry>
      </row>
      <row>
	<entry><para>\f</para></entry>
	<entry><para>a form-feed character</para></entry>
      </row>
      <row>
	<entry><para>\num</para></entry>
	<entry><para>an 8-bit character whose value is the 1, 2, or 3 digit octal number <replaceable>num</replaceable></para></entry>
      </row>
      <row>
	<entry><para>\"</para></entry>
	<entry><para>a double-quote character</para></entry>
      </row>
    </tbody>
  </tgroup>
  </table>

</sect1>
</chapter>

